;; Analyzed by ClojureScript 1.7.170
{:use-macros {sel1 dommy.core, go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name markhudnall.core, :imports nil, :requires {cljs.core.async cljs.core.async, dommy dommy.core, dommy.core dommy.core}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {neighbors {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 45, :column 7, :end-line 45, :end-column 16, :arglists (quote ([[x y]])), :doc "Returns a sequence of tuples that are neighbors of the given cell"}, :name markhudnall.core/neighbors, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 16, :method-params ([p__25925]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y]])), :doc "Returns a sequence of tuples that are neighbors of the given cell"}, number-of-rows {:name markhudnall.core/number-of-rows, :file "src/cljs/markhudnall/core.cljs", :line 14, :column 1, :end-line 14, :end-column 20, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 14, :column 6, :end-line 14, :end-column 20}}, rand-bool {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name markhudnall.core/rand-bool, :variadic true, :file "src/cljs/markhudnall/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, get-canvas {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 10, :column 7, :end-line 10, :end-column 17, :arglists (quote ([]))}, :name markhudnall.core/get-canvas, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-chan {:name markhudnall.core/render-chan, :file "src/cljs/markhudnall/core.cljs", :line 77, :column 1, :end-line 77, :end-column 21, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 77, :column 10, :end-line 77, :end-column 21}}, cell-size {:name markhudnall.core/cell-size, :file "src/cljs/markhudnall/core.cljs", :line 23, :column 1, :end-line 23, :end-column 15, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 23, :column 6, :end-line 23, :end-column 15}}, render-cell! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([ctx x y value])), :doc "Renders a cell on a canvas"}, :name markhudnall.core/render-cell!, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 19, :method-params ([ctx x y value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ctx x y value])), :doc "Renders a cell on a canvas"}, animation-loop! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 80, :column 7, :end-line 80, :end-column 22, :arglists (quote ([ch prev timestamp]))}, :name markhudnall.core/animation-loop!, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 22, :method-params ([ch prev timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ch prev timestamp]))}, render-game! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([canvas game])), :doc "Recursively renders successive game states."}, :name markhudnall.core/render-game!, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 19, :method-params ([canvas game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas game])), :doc "Recursively renders successive game states."}, build-initial-grid {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 63, :column 7, :end-line 63, :end-column 25, :arglists (quote ([size alive?]))}, :name markhudnall.core/build-initial-grid, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 25, :method-params ([size alive?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([size alive?]))}, game {:name markhudnall.core/game, :file "src/cljs/markhudnall/core.cljs", :line 117, :column 1, :end-line 117, :end-column 14, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 117, :column 10, :end-line 117, :end-column 14}}, build-grid {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 54, :column 7, :end-line 54, :end-column 17, :arglists (quote ([prev]))}, :name markhudnall.core/build-grid, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 17, :method-params ([prev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([prev]))}, handle-canvas-click {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 88, :column 7, :end-line 88, :end-column 26, :arglists (quote ([e]))}, :name markhudnall.core/handle-canvas-click, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 26, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, get-cell-size {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([]))}, :name markhudnall.core/get-cell-size, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, loop-game! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 92, :column 7, :end-line 92, :end-column 17, :arglists (quote ([]))}, :name markhudnall.core/loop-game!, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, grid-chan {:name markhudnall.core/grid-chan, :file "src/cljs/markhudnall/core.cljs", :line 78, :column 1, :end-line 78, :end-column 19, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 78, :column 10, :end-line 78, :end-column 19}}, render-grid! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/src/cljs/markhudnall/core.cljs", :line 35, :column 7, :end-line 35, :end-column 19, :arglists (quote ([canvas grid size])), :doc "Given a grid, render it to the page."}, :name markhudnall.core/render-grid!, :variadic false, :file "src/cljs/markhudnall/core.cljs", :end-column 19, :method-params ([canvas grid size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([canvas grid size])), :doc "Given a grid, render it to the page."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, dommy.core dommy.core, dommy dommy.core}, :cljs.analyzer/constants {:seen #{:else :recur :click}, :order [:click :recur :else]}, :doc nil}