;; Analyzed by ClojureScript 1.7.170
{:use-macros {sel dommy.core}, :excludes #{ancestors class}, :name dommy.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, utils dommy.utils, dommy.utils dommy.utils}, :uses {as-str dommy.utils}, :defs {scroll-into-view {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 294, :column 7, :end-line 294, :end-column 23, :arglists (quote ([elem align-with-top?]))}, :name dommy.core/scroll-into-view, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 23, :method-params ([elem align-with-top?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem align-with-top?]))}, toggle-attr! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 221, :column 7, :end-line 221, :end-column 19, :arglists (quote ([elem k] [elem k add?])), :doc "Toggles a dom attribute `k` on `elem`, optionally specifying\n   the boolean value with `add?`", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}}, :name dommy.core/toggle-attr!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}, :method-params ([elem k] [elem k add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k add?]), :doc "Toggles a dom attribute `k` on `elem`, optionally specifying\n   the boolean value with `add?`"}, replace-contents! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 369, :column 7, :end-line 369, :end-column 24, :arglists (quote ([p child])), :doc "Replace children of `elem` with `child`"}, :name dommy.core/replace-contents!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 24, :method-params ([p child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p child])), :doc "Replace children of `elem` with `child`"}, elem-and-selector {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 423, :column 8, :end-line 423, :end-column 25, :private true, :arglists (quote ([elem-sel]))}, :private true, :name dommy.core/elem-and-selector, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 25, :method-params ([elem-sel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem-sel]))}, remove-style! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 163, :column 7, :end-line 163, :end-column 20, :arglists (quote ([elem & keywords])), :doc "Remove the style of `elem` using keywords:\n  \n      (remove-style! elem :display :color)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem keywords)], :arglists ([elem & keywords]), :arglists-meta (nil)}}, :name dommy.core/remove-style!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem keywords)], :arglists ([elem & keywords]), :arglists-meta (nil)}, :method-params [(elem keywords)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists ([elem & keywords]), :doc "Remove the style of `elem` using keywords:\n  \n      (remove-style! elem :display :color)"}, remove! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 374, :column 7, :end-line 374, :end-column 14, :arglists (quote ([elem] [p elem])), :doc "Remove `elem` from `parent`, return `parent`", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem] [p elem]), :arglists ([elem] [p elem]), :arglists-meta (nil nil)}}, :name dommy.core/remove!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem] [p elem]), :arglists ([elem] [p elem]), :arglists-meta (nil nil)}, :method-params ([elem] [p elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 2, :fn-var true, :arglists ([elem] [p elem]), :doc "Remove `elem` from `parent`, return `parent`"}, show! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 292, :column 7, :end-line 292, :end-column 12, :arglists (quote ([elem]))}, :name dommy.core/show!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, hide! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 289, :column 7, :end-line 289, :end-column 12, :arglists (quote ([elem]))}, :name dommy.core/hide!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, set-html! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 135, :column 7, :end-line 135, :end-column 16, :arglists (quote ([elem html])), :doc "Set the innerHTML of `elem` to `html`"}, :name dommy.core/set-html!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 16, :method-params ([elem html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem html])), :doc "Set the innerHTML of `elem` to `html`"}, listen! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 429, :column 7, :end-line 429, :end-column 14, :arglists (quote ([elem-sel & type-fs])), :doc "Adds `f` as a listener for events of type `event-type` on\n   `elem-sel`, which must either be a DOM node, or a sequence\n   whose first item is a DOM node.\n\n   In other words, the call to `listen!` can take two forms:\n\n   If `elem-sel` is a DOM node, i.e., you're doing something like:\n\n       (listen! elem :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on the `elem`.\n\n   If `elem-sel` is a sequence:\n\n       (listen! [elem :.selector.for :.some.descendants] :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on descendants of `elem` that match the selector\n\n   Also accepts any number of event-type and handler pairs for setting\n   multiple listeners at once:\n\n       (listen! some-elem :click click-handler :hover hover-handler)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}}, :name dommy.core/listen!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}, :method-params [(elem-sel type-fs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists ([elem-sel & type-fs]), :doc "Adds `f` as a listener for events of type `event-type` on\n   `elem-sel`, which must either be a DOM node, or a sequence\n   whose first item is a DOM node.\n\n   In other words, the call to `listen!` can take two forms:\n\n   If `elem-sel` is a DOM node, i.e., you're doing something like:\n\n       (listen! elem :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on the `elem`.\n\n   If `elem-sel` is a sequence:\n\n       (listen! [elem :.selector.for :.some.descendants] :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on descendants of `elem` that match the selector\n\n   Also accepts any number of event-type and handler pairs for setting\n   multiple listeners at once:\n\n       (listen! some-elem :click click-handler :hover hover-handler)"}, set-value! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 141, :column 7, :end-line 141, :end-column 17, :arglists (quote ([elem value])), :doc "Set the value of `elem` to `value`"}, :name dommy.core/set-value!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 17, :method-params ([elem value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem value])), :doc "Set the value of `elem` to `value`"}, set-style! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 152, :column 7, :end-line 152, :end-column 17, :arglists (quote ([elem & kvs])), :doc "Set the style of `elem` using key-value pairs:\n\n      (set-style! elem :display \"block\" :color \"red\")", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.core/set-style!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs]), :doc "Set the style of `elem` using key-value pairs:\n\n      (set-style! elem :display \"block\" :color \"red\")"}, set-class! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 147, :column 7, :end-line 147, :end-column 17, :arglists (quote ([elem c])), :doc "Set the css class of `elem` to `elem`"}, :name dommy.core/set-class!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 17, :method-params ([elem c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem c])), :doc "Set the css class of `elem` to `elem`"}, has-class? {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 51, :column 16, :end-line 51, :end-column 26, :tag boolean, :arglists (quote ([elem c])), :doc "Does `elem` contain `c` in its class list"}, :name dommy.core/has-class?, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 26, :method-params ([elem c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :ret-tag boolean, :end-line 51, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([elem c])), :doc "Does `elem` contain `c` in its class list"}, set-attr! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 183, :column 7, :end-line 183, :end-column 16, :arglists (quote ([elem k] [elem k v] [elem k v & kvs])), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to their name:\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}}, :name dommy.core/set-attr!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}, :method-params ([elem k] [elem k v]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k v] [elem k v & kvs]), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to their name:\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")"}, text {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 21, :column 7, :end-line 21, :end-column 11, :arglists (quote ([elem]))}, :name dommy.core/text, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 11, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, listen-once! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 497, :column 7, :end-line 497, :end-column 19, :arglists (quote ([elem-sel & type-fs])), :doc "Behaves like `listen!`, but removes the listener after the first event occurs.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}}, :name dommy.core/listen-once!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}, :method-params [(elem-sel type-fs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 497, :end-line 497, :max-fixed-arity 1, :fn-var true, :arglists ([elem-sel & type-fs]), :doc "Behaves like `listen!`, but removes the listener after the first event occurs."}, attr {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([elem k]))}, :name dommy.core/attr, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 11, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, html {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 24, :column 7, :end-line 24, :end-column 11, :arglists (quote ([elem]))}, :name dommy.core/html, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 11, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, children {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 81, :column 7, :end-line 81, :end-column 15, :arglists (quote ([elem]))}, :name dommy.core/children, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 15, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, selector {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 10, :column 7, :end-line 10, :end-column 15, :arglists (quote ([data])), :doc "Returns a selector in string format.\n   Accepts string, keyword, or collection."}, :name dommy.core/selector, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 15, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns a selector in string format.\n   Accepts string, keyword, or collection."}, set-text! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 127, :column 7, :end-line 127, :end-column 16, :arglists (quote ([elem text])), :doc "Set the textContent of `elem` to `text`, fall back to innerText"}, :name dommy.core/set-text!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 16, :method-params ([elem text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem text])), :doc "Set the textContent of `elem` to `text`, fall back to innerText"}, update-event-listeners! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 417, :column 8, :end-line 417, :end-column 31, :private true, :arglists (quote ([elem f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(elem f args)], :arglists ([elem f & args]), :arglists-meta (nil)}}, :private true, :name dommy.core/update-event-listeners!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(elem f args)], :arglists ([elem f & args]), :arglists-meta (nil)}, :method-params [(elem f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 417, :end-line 417, :max-fixed-arity 2, :fn-var true, :arglists ([elem f & args])}, add-class! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 231, :column 7, :end-line 231, :end-column 17, :arglists (quote ([elem classes] [elem classes & more-classes])), :doc "Add `classes` to `elem`, trying to use Element::classList, and\n   falling back to fast string parsing/manipulation", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}}, :name dommy.core/add-class!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}, :method-params ([elem classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists ([elem classes] [elem classes & more-classes]), :doc "Add `classes` to `elem`, trying to use Element::classList, and\n   falling back to fast string parsing/manipulation"}, parent {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([elem]))}, :name dommy.core/parent, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, descendant? {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 113, :column 16, :end-line 113, :end-column 27, :tag boolean, :arglists (quote ([descendant ancestor])), :doc "Is `descendant` a descendant of `ancestor`?\n   (http://goo.gl/T8pgCX)"}, :name dommy.core/descendant?, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 27, :method-params ([descendant ancestor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :ret-tag boolean, :end-line 113, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([descendant ancestor])), :doc "Is `descendant` a descendant of `ancestor`?\n   (http://goo.gl/T8pgCX)"}, insert-before! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 345, :column 7, :end-line 345, :end-column 21, :arglists (quote ([elem other])), :doc "Insert `elem` before `other`, `other` must have a parent"}, :name dommy.core/insert-before!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 21, :method-params ([elem other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem other])), :doc "Insert `elem` before `other`, `other` must have a parent"}, remove-class! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 250, :column 7, :end-line 250, :end-column 20, :arglists (quote ([elem c] [elem class & classes])), :doc "Remove `c` from `elem` class list", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem c]), :arglists ([elem c] [elem class & classes]), :arglists-meta (nil nil)}}, :name dommy.core/remove-class!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem c]), :arglists ([elem c] [elem class & classes]), :arglists-meta (nil nil)}, :method-params ([elem c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists ([elem c] [elem class & classes]), :doc "Remove `c` from `elem` class list"}, value {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 27, :column 7, :end-line 27, :end-column 12, :arglists (quote ([elem]))}, :name dommy.core/value, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, set-px! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 173, :column 7, :end-line 173, :end-column 14, :arglists (quote ([elem & kvs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.core/set-px!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs])}, insert-after! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 353, :column 7, :end-line 353, :end-column 20, :arglists (quote ([elem other])), :doc "Insert `elem` after `other`, `other` must have a parent"}, :name dommy.core/insert-after!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 20, :method-params ([elem other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem other])), :doc "Insert `elem` after `other`, `other` must have a parent"}, append! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 323, :column 7, :end-line 323, :end-column 14, :arglists (quote ([parent child] [parent child & more-children])), :doc "Append `child` to `parent`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([parent child]), :arglists ([parent child] [parent child & more-children]), :arglists-meta (nil nil)}}, :name dommy.core/append!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([parent child]), :arglists ([parent child] [parent child & more-children]), :arglists-meta (nil nil)}, :method-params ([parent child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists ([parent child] [parent child & more-children]), :doc "Append `child` to `parent`"}, px {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 45, :column 7, :end-line 45, :end-column 9, :arglists (quote ([elem k]))}, :name dommy.core/px, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 9, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, live-listener {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 403, :column 7, :end-line 403, :end-column 20, :arglists (quote ([elem selector f])), :doc "fires f if event.target is found with `selector`"}, :name dommy.core/live-listener, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 20, :method-params ([elem selector f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elem selector f])), :doc "fires f if event.target is found with `selector`"}, clear! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 318, :column 7, :end-line 318, :end-column 13, :arglists (quote ([elem])), :doc "Clears all children from `elem`"}, :name dommy.core/clear!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Clears all children from `elem`"}, remove-attr! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 206, :column 7, :end-line 206, :end-column 19, :arglists (quote ([elem k] [elem k & ks])), :doc "Removes dom attributes on and returns `elem`.\n   `class` and `classes` are special cases which clear\n   out the class name on removal.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}}, :name dommy.core/remove-attr!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists ([elem k] [elem k & ks]), :doc "Removes dom attributes on and returns `elem`.\n   `class` and `classes` are special cases which clear\n   out the class name on removal."}, matches-pred {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 91, :column 7, :end-line 91, :end-column 19, :arglists (quote ([base selector] [selector])), :doc "Returns a predicate on nodes that match `selector` at the\n   time of this `matches-pred` call (may return outdated results\n   if you fuck with the DOM)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([base selector] [selector]), :arglists ([base selector] [selector]), :arglists-meta (nil nil)}}, :name dommy.core/matches-pred, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([base selector] [selector]), :arglists ([base selector] [selector]), :arglists-meta (nil nil)}, :method-params ([base selector] [selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists ([base selector] [selector]), :doc "Returns a predicate on nodes that match `selector` at the\n   time of this `matches-pred` call (may return outdated results\n   if you fuck with the DOM)"}, create-text-node {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 311, :column 7, :end-line 311, :end-column 23, :arglists (quote ([text]))}, :name dommy.core/create-text-node, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 23, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, ancestors {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 84, :column 7, :end-line 84, :end-column 16, :arglists (quote ([elem])), :doc "Lazy seq of the ancestors of `elem`"}, :name dommy.core/ancestors, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 16, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Lazy seq of the ancestors of `elem`"}, style {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 37, :column 7, :end-line 37, :end-column 12, :arglists (quote ([elem] [elem k])), :doc "The computed style of `elem`, optionally specifying the key of\n   a particular style to return", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem] [elem k]), :arglists ([elem] [elem k]), :arglists-meta (nil nil)}}, :name dommy.core/style, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem] [elem k]), :arglists ([elem] [elem k]), :arglists-meta (nil nil)}, :method-params ([elem] [elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([elem] [elem k]), :doc "The computed style of `elem`, optionally specifying the key of\n   a particular style to return"}, unlisten! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 471, :column 7, :end-line 471, :end-column 16, :arglists (quote ([elem-sel & type-fs])), :doc "Removes event listener for the element defined in `elem-sel`,\n   which is the same format as listen!.\n\n  The following forms are allowed, and will remove all handlers\n  that match the parameters passed in:\n\n      (unlisten! [elem :.selector] :click event-listener)\n\n      (unlisten! [elem :.selector]\n        :click event-listener\n        :mouseover other-event-listener)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}}, :name dommy.core/unlisten!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem-sel type-fs)], :arglists ([elem-sel & type-fs]), :arglists-meta (nil)}, :method-params [(elem-sel type-fs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 471, :end-line 471, :max-fixed-arity 1, :fn-var true, :arglists ([elem-sel & type-fs]), :doc "Removes event listener for the element defined in `elem-sel`,\n   which is the same format as listen!.\n\n  The following forms are allowed, and will remove all handlers\n  that match the parameters passed in:\n\n      (unlisten! [elem :.selector] :click event-listener)\n\n      (unlisten! [elem :.selector]\n        :click event-listener\n        :mouseover other-event-listener)"}, toggle-class! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 265, :column 7, :end-line 265, :end-column 20, :arglists (quote ([elem c] [elem class add?])), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem c] [elem class add?]), :arglists ([elem c] [elem class add?]), :arglists-meta (nil nil)}}, :name dommy.core/toggle-class!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem c] [elem class add?]), :arglists ([elem c] [elem class add?]), :arglists-meta (nil nil)}, :method-params ([elem c] [elem class add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 3, :fn-var true, :arglists ([elem c] [elem class add?]), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!"}, class {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 30, :column 7, :end-line 30, :end-column 12, :arglists (quote ([elem]))}, :name dommy.core/class, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, replace! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 361, :column 7, :end-line 361, :end-column 15, :arglists (quote ([elem new])), :doc "Replace `elem` with `new`, return `new`"}, :name dommy.core/replace!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 15, :method-params ([elem new]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 361, :end-line 361, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem new])), :doc "Replace `elem` with `new`, return `new`"}, event-listeners {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 412, :column 8, :end-line 412, :end-column 23, :private true, :arglists (quote ([elem])), :doc "Returns a nested map of event listeners on `elem`"}, :private true, :name dommy.core/event-listeners, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 23, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a nested map of event listeners on `elem`"}, hidden? {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 61, :column 16, :end-line 61, :end-column 23, :tag boolean, :arglists (quote ([elem])), :doc "Is `elem` hidden (as associated with hide!/show!/toggle!, using display: none)"}, :name dommy.core/hidden?, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 23, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :ret-tag boolean, :end-line 61, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([elem])), :doc "Is `elem` hidden (as associated with hide!/show!/toggle!, using display: none)"}, bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 66, :column 7, :end-line 66, :end-column 27, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, :name dommy.core/bounding-client-rect, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 27, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, toggle! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 282, :column 7, :end-line 282, :end-column 14, :arglists (quote ([elem show?] [elem])), :doc "Display or hide the given `elem` (using display: none).\n   Takes an optional boolean `show?`", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}}, :name dommy.core/toggle!, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}, :method-params ([elem show?] [elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists ([elem show?] [elem]), :doc "Display or hide the given `elem` (using display: none).\n   Takes an optional boolean `show?`"}, closest {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 102, :column 7, :end-line 102, :end-column 14, :arglists (quote ([base elem selector] [elem selector])), :doc "Closest ancestor of `elem` (up to `base`, if provided)\n   that matches `selector`", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([base elem selector] [elem selector]), :arglists ([base elem selector] [elem selector]), :arglists-meta (nil nil)}}, :name dommy.core/closest, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([base elem selector] [elem selector]), :arglists ([base elem selector] [elem selector]), :arglists-meta (nil nil)}, :method-params ([base elem selector] [elem selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists ([base elem selector] [elem selector]), :doc "Closest ancestor of `elem` (up to `base`, if provided)\n   that matches `selector`"}, prepend! {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 334, :column 7, :end-line 334, :end-column 15, :arglists (quote ([parent child] [parent child & more-children])), :doc "Prepend `child` to `parent`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([parent child]), :arglists ([parent child] [parent child & more-children]), :arglists-meta (nil nil)}}, :name dommy.core/prepend!, :variadic true, :file "resources/public/js/out/dommy/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([parent child]), :arglists ([parent child] [parent child & more-children]), :arglists-meta (nil nil)}, :method-params ([parent child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 2, :fn-var true, :arglists ([parent child] [parent child & more-children]), :doc "Prepend `child` to `parent`"}, ancestor-nodes {:name dommy.core/ancestor-nodes, :file "resources/public/js/out/dommy/core.cljs", :line 89, :column 1, :end-line 89, :end-column 43, :deprecated "1.0.0", :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 89, :column 29, :end-line 89, :end-column 43, :deprecated "1.0.0"}}, special-listener-makers {:name dommy.core/special-listener-makers, :file "resources/public/js/out/dommy/core.cljs", :line 387, :column 1, :end-line 387, :end-column 29, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 387, :column 6, :end-line 387, :end-column 29}}, create-element {:protocol-inline nil, :meta {:file "/Users/mark/Documents/code/markhudnall/resources/public/js/out/dommy/core.cljs", :line 304, :column 7, :end-line 304, :end-column 21, :arglists (quote ([tag] [tag-ns tag])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [tag-ns tag]), :arglists ([tag] [tag-ns tag]), :arglists-meta (nil nil)}}, :name dommy.core/create-element, :variadic false, :file "resources/public/js/out/dommy/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [tag-ns tag]), :arglists ([tag] [tag-ns tag]), :arglists-meta (nil nil)}, :method-params ([tag] [tag-ns tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 2, :fn-var true, :arglists ([tag] [tag-ns tag])}}, :require-macros {dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{p :bottom :disabled :top :mouseenter type-fs :mouseout :width kvs even? :mouseover :mouseleave :right :display count :height :left}, :order [:display :top :bottom :left :right :width :height even? count kvs p :mouseenter :mouseleave :mouseover :mouseout :disabled type-fs]}, :doc "Core DOM manipulation functions"}