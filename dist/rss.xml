<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://markhudnall.com" rel="self" type="application/rss+xml"/><title>Mark Hudnall's website</title><link>https://markhudnall.com</link><description>Mark Hudnall's piece of cyberspace</description><generator>clj-rss</generator><item><title>How many servers do we need?</title><link>https://markhudnall.com/2023/06/09/concurrency-and-queuing-theory/</link><pubDate>Thu, 08 Jun 2023 17:00:00 -0700</pubDate><description><![CDATA[<p>How much concurrency do we need to handle a given throughput and response time? </p><p>This is a fundamental question when scaling software systems. Since software systems are queues, let us try to answer it with queuing theory.</p><h2 id="an&#95;initial&#95;guess&#95;using&#95;little's&#95;law">An initial guess using Little's law</h2><p><a href='https://en.wikipedia.org/wiki/Little\'s_law'>Little's law</a> states that the average number of jobs in a system (\(L\)) is equal to the arrival rate of jobs (\(\lambda\)) multiplied by the average time a job spends in the system (\(W\)).  In other words, \(L = \lambda W\). </p><p>Little's law can provide a simple estimate of the required concurrency &mdash; we can set concurrency to the average number of jobs in the system, given some known arrival rate (throughput) and service time (response time).</p><p>Consider a web server where average response time is 100ms. Suppose we'd like to handle a throughput of 100 requests per second. Using Little's law, we would conclude that, on average, 10 requests are "in progress" from clients' perspectives (either queued or actively being serviced). We might then think to set concurrency to 10 in order to effectively handle this load.</p><p>However, because Little's law works with averages, it doesn't account for variability in the requests' arrival and service times. In practice, requests are not uniformly distributed over time, and some requests may take longer than others. There is a non-zero probability that an incoming request might find all servers busy and need to wait. </p><p>So Little's law on its own is not enough. We need to consider a more sophisticated model.</p><h2 id="erlang's&#95;c&#95;formula">Erlang's C formula</h2><p>We would like to find some level of concurrency that constrains the probability of waiting to some target. To do this, we turn to <a href='https://en.wikipedia.org/wiki/Erlang_&#40;unit&#41;#Erlang_C_formula'>Erlang's C formula</a>, which provides us with the probability that an incoming job must wait because all servers are busy<a href='#fn-1' id='fnref1'><sup>1</sup></a>. Erlang's C formula is defined as follows:</p><p>\[ C(L, S) = \frac{\frac{L^S}{S!} \times \frac{S}{S - L}}{\sum_{i=0}^{S-1} \frac{L^i}{i!} + \frac{L^S}{S!} \times \frac{S}{S - L}}  \]</p><p>Here, \(L\) is the average number of jobs in the system, or \(\lambda W\) as above with Little's law. \(S\) is the number of servers. \(L\) is also referred to as <a href='https://en.wikipedia.org/wiki/Offered_load'>"offered traffic"</a> &mdash; Erlang's C formula was developed in the context of efficient telephone line usage so "offered traffic" thus refers to the amount of traffic that could be carried given a certain volume of calls and unlimited lines. For our purposes, it is average load, or the average number of requests expected to be in-progress from clients' perspectives, given a certain throughput and response time.</p><p>To find the ideal level of concurrency, we can start with some number of servers (the initial guess using Little's law) and then increment it until \(C(L,S)\) is below some desired threshold (say 5% probability of waiting). We will write a script to do this.</p><p>We're faced with a challenge here, though. Due to the factorials, computing Erlang's C formula will underflow. To work around this, we will translate Erlang's C formula into log-probability space where underflows and overflows are less likely.</p><h2 id="deriving&#95;the&#95;logarithmic&#95;erlang&#95;c&#95;formula">Deriving the logarithmic Erlang C formula</h2><p>We start with the original Erlang's C formula:</p><p>\[ C(L, S) = \frac{\frac{L^S}{S!} \times \frac{S}{S - L}}{\sum_{i=0}^{S-1} \frac{L^i}{i!} + \frac{L^S}{S!} \times \frac{S}{S - L}}  \]</p><p>We take the natural log of each term in the formula:</p><p>\[ \log(C(L, S)) = \log(\frac{L^S}{S!}) + \log(\frac{S}{S - L}) - \log(\sum_{i=0}^{S-1} \frac{L^i}{i!} + \frac{L^S}{S!} \times \frac{S}{S - L}) \]</p><p>Here, we've used the property of logarithms \(\log(a/b) = \log(a) - \log(b)\).</p><p>We further simplify the above expression:</p><p>\[  \begin{align}  \log(C(L, S)) = S \log(L) &- \log\Gamma(S + 1) \\  &+ \log(S) - \log(S - L) \\  &- \log(\sum_{i=0}^{S-1} e^{i \log(L) - \log\Gamma(i + 1)} \\  &+ e^{S \log(L) - \log\Gamma(S + 1) + \log(S) - \log(S - L)})  \end{align}  \] </p><p>Here, we've used the property of logarithms, \(\log(a^b) = b \cdot \log(a)\), and replaced factorials with the <a href='https://en.wikipedia.org/wiki/Gamma_function'>Gamma function</a> (\(n! = \Gamma(n + 1)\) for a non-negative integer \(n\)), as \(\log(n!)\) can be computed as \(\log\Gamma(n + 1)\).</p><p>Note that the original denominator is now the log of a sum of exponentials. We can thus use the <a href='https://en.wikipedia.org/wiki/LogSumExp'>log-sum-exp trick</a> to calculate these terms without underflow.</p><p>Finally, we exponentiate the log-probability to get back to the original probability space:</p><p>\[ C(L, S) = \exp(\log(C(L, S))) \]</p><h2 id="python&#95;code">Python code</h2><p>Let's look at how we'll calculate the minimum concurrency needed to meet a certain throughput, response time, and probability of queuing.</p><p>First, we'll choose an initial guess for the required number of servers using Little's law and a target throughput and response time. Then, we will update our initial guess using an iterative process. We will increment the number of servers until the probability of queuing, as given by our logarithmic Erlang's C formula, is below our desired max.</p><pre><code class="python">import math

def log&#95;sum&#95;exp&#40;numbers&#41;:
    max&#95;num = max&#40;numbers&#41;
    return max&#95;num + math.log&#40;sum&#40;math.exp&#40;x - max&#95;num&#41; for x in numbers&#41;&#41;

def erlang&#95;c&#40;L, S&#41;:
    log&#95;numerator = S &#42; math.log&#40;L&#41; - math.lgamma&#40;S + 1&#41; + math.log&#40;S&#41; - math.log&#40;S - L&#41;
    denominator&#95;terms = &#91;i &#42; math.log&#40;L&#41; - math.lgamma&#40;i + 1&#41; for i in range&#40;S&#41;&#93; + &#91;S &#42; math.log&#40;L&#41; - math.lgamma&#40;S + 1&#41; + math.log&#40;S&#41; - math.log&#40;S-L&#41;&#93;
    log&#95;denominator = log&#95;sum&#95;exp&#40;denominator&#95;terms&#41;
    erlang&#95;c = math.exp&#40;log&#95;numerator - log&#95;denominator&#41;
    return erlang&#95;c

def calculate&#95;servers&#40;lambda&#95;, W, max&#95;prob&#41;:
    lambda&#95; = float&#40;lambda&#95;&#41;
    W = float&#40;W&#41;
    L = lambda&#95; &#42; W
    S = math.floor&#40;L + 1&#41;
    print&#40;f'Starting with {S} servers'&#41;
    prob = erlang&#95;c&#40;L, S&#41;
    while prob &gt; max&#95;prob:
        print&#40;f'With {S} servers, the queuing probability is {prob}. Trying {S + 1} servers.'&#41;
        S += 1
        prob = erlang&#95;c&#40;L, S&#41;
    return S, prob

requests&#95;per&#95;second = 1000.0
response&#95;time&#95;s = 0.1
max&#95;prob = 0.05

num&#95;servers, prob = calculate&#95;servers&#40;requests&#95;per&#95;second, response&#95;time&#95;s, max&#95;prob&#41;
print&#40;f'The minimum number of servers required is: {num&#95;servers} &#40;queuing probability {prob}&#41;'&#41;
</code></pre><p>When we run this script, we see the following output:</p><pre><code class="text">Starting with 101 servers
With 101 servers, the queuing probability is 0.8833145020395913. Trying 102 servers.
With 102 servers, the queuing probability is 0.7770966583320832. Trying 103 servers.
With 103 servers, the queuing probability is 0.6807968118039859. Trying 104 servers.
With 104 servers, the queuing probability is 0.593855705420894. Trying 105 servers.
With 105 servers, the queuing probability is 0.5157074268123086. Trying 106 servers.
With 106 servers, the queuing probability is 0.44578262621325715. Trying 107 servers.
With 107 servers, the queuing probability is 0.3835119575327338. Trying 108 servers.
With 108 servers, the queuing probability is 0.32832968002713697. Trying 109 servers.
With 109 servers, the queuing probability is 0.27967734713081166. Trying 110 servers.
With 110 servers, the queuing probability is 0.23700750028506098. Trying 111 servers.
With 111 servers, the queuing probability is 0.1997872798880628. Trying 112 servers.
With 112 servers, the queuing probability is 0.16750186339584125. Trying 113 servers.
With 113 servers, the queuing probability is 0.13965764259076413. Trying 114 servers.
With 114 servers, the queuing probability is 0.11578505827853611. Trying 115 servers.
With 115 servers, the queuing probability is 0.09544102105759475. Trying 116 servers.
With 116 servers, the queuing probability is 0.0782108608850327. Trying 117 servers.
With 117 servers, the queuing probability is 0.06370976519997625. Trying 118 servers.
With 118 servers, the queuing probability is 0.05158368436937104. Trying 119 servers.
The minimum number of servers required is: 119 &#40;queuing probability 0.04150970303605052&#41;
</code></pre><p>It's interesting to note that our initial guess has a very high probability of queuing. If we graph our findings, we see that Erlang's C formula is decreasing and convex in \(S\):</p><p><img src="/img/erlang-c.svg" alt="" /></p><h2 id="beyond&#95;the&#95;erlang&#95;model">Beyond the Erlang model</h2><p>Our model here gives the impression that throughput scales linearly with concurrency. In practice, it does not.</p><p><a href='https://en.wikipedia.org/wiki/Amdahl%27s_law'>Amdahl's law</a> and the <a href='https://en.wikipedia.org/wiki/Neil_J._Gunther#Universal_Law_of_Computational_Scalability'>Universal Scalability Law</a> remind us that as we increase concurrency, total speedup is limited by sequential computation, as well as contention and coherence issues. </p><p>Amdahl's law states that any speedup using multiple processors is limited by the time needed for the sequential fraction of the program. Similarly, for USL, our system may depend on a shared resource like a database, or require coordination to keep data consistent across multiple servers. Ultimately, the throughput we get from increasing concurrency diminishes with scale.</p><p>Perhaps we could measure the contention and coherence factors empirically as we scale, in pursuit of a better model.</p><h3 id="m/m/c&#95;queues">M/M/c queues</h3><p>The analysis also relies on the <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/c queue model</a>, characterized by three properties:</p><ul><li><strong>Markovian (or Poisson) arrival process:</strong> Jobs arrive independently at a constant average rate. In simpler terms, the timing of the next job arrival does not depend on when the previous job arrived &mdash; this is what we mean by "Markovian". The arrivals could be at any time, and they are spaced apart randomly but with a constant average rate.</li><li><strong>Markovian service times:</strong> Similar to arrivals, the time it takes to service the next job does not depend on how long it took to service the previous job, and there is a constant average rate.</li><li><strong>c servers:</strong> There are c identical servers each operating at the same average service rate.</li></ul><p>Many real-world systems don't adhere to these assumptions. For example, if clients retry requests or make sequential requests during page load, then arrivals are no longer memoryless &mdash; there are dependencies between request arrival times. Similarly, if servers contend for a common database under load, service times may no longer be independent. And if an application has peak times, then request arrival times are unlikely to be Markovian, since the arrival process depends on the time of day.</p><p>The model is a simplification, and we must always keep that in mind. It can still useful, if we are judicious in how we apply it. For example, perhaps it's better to use throughput and response time at peak times, rather than their averages, even if it means over-provisioning most of the time. We must recognize that there might not be a definitive answer, but instead, an ongoing exploration that balances the tension of theory, observation, and good old tinkering.</p><ol class='footnotes'><li id='fn-1'>For an <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/c</a> queue. See the last section for caveats.<a href='#fnref1'>&#8617;</a></li></ol>]]></description></item><item><title>Three things about Common Lisp</title><link>https://markhudnall.com/2021/02/27/three-things-about-common-lisp/</link><pubDate>Fri, 26 Feb 2021 16:00:00 -0800</pubDate><description><![CDATA[<p>I continue to have my mind blown by Common Lisp. Here are three things I've been thinking about.</p><h2 id="1.&#95;error&#95;handling">1. Error handling</h2><p>Common Lisp made me realize I was living with a fixed mental model of error handling. Swimming in water, so to speak. To me, error handling meant try/catch or returning errors directly from functions a la golang or promises. In either case, control is relinquished at the error-site and bubbled up the stack to an error handler. The flow of control continues with the error handler.</p><p>The Common Lisp condition system, on the other hand, separates flow of control from the error handler. A low-level piece of code can define multiple ways to handle an error that it might throw. A higher-level function can then decide which path to actually take when the error is thrown. Control flow depends on that decision: it is possible to just skip the error and continue on with the low-level code, if that is one of the error handling options that the low-level code provides.</p><p>This is simply not possible in the try/catch paradigm without directly handling the error at the error-site, which means we lose generality: we are now stuck with a specific error handling implementation without the ability to customize.</p><p>The chapter, <a href='http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html'>Beyong Exception Handling: Conditions and Restarts</a> from Practical Common Lisp explains the condition system very well.</p><h2 id="2.&#95;dynamic&#95;variables">2. Dynamic variables</h2><p>Dynamic variables are like global variables with a twist. We are used to lexical scoping, where a variable is defined in some scope and can be accessed by any inner scope that is literally nested within the outer one. Dynamic variables, on the other hand, are "dynamically scoped". When a dynamic variable is bound to a value, this binding lives on for the duration of that scope, surviving function calls. The binding is pushed onto a stack, so when the scope ends, the binding is popped and the variable returns to its former value. This differs from a global variable, where "re-binding" the variable merely sets it to a different value.</p><p>I've seen dynamic variables before in elisp and clojure. I've almost never used them in clojure, and I've used them sparingly in emacs when it was the only possible way to customize some value for the duration of a block. I equated dynamic variables with global variables, and I've seen the messiness of relying on global variables.</p><p>In Common Lisp... they just make sense for some reason. Maybe it's the fact that they're used so much more in Common Lisp code I've been working with, but I find it incredibly useful to have a value that is "globally" accessible (but only for a certain, well-defined lifetime) and to be able to customize that variable non-locally.</p><p>I see the pitfalls too. Since any function inside a scope can set a dynamic variable, it makes data flow unclear. Very easy to forget that the variable can be set non-locally and write code that assumes the value I set 3 lines above in a <code>let</code> binding is the current one.</p><p>There's a sort of similar pitfall with the condition system: my code cannot necessarily assume that throwing an error means control will end at that location.</p><h2 id="3.&#95;interactivity">3. Interactivity</h2><p>Common Lisp is intensely interactive. It is possible (and seemingly common), for example, to embed a <a href='https://common-lisp.net/project/slime/doc/html/Setting-up-the-lisp-image.html'>Swank</a> server in a production deployment. This allows you to connect to the running production system in a REPL. You can change live data, debug problems, hotswap code, etc. You might have also heard <a href='https://www.youtube.com/watch?v=_gZK0tW8EhQ'>the story of lisp at the JPL</a>, where they debugged a problem over a REPL through space.</p><p>Interactivity is at the core of the language. Installing dependencies happens at the REPL inside the running lisp process, rather than through an out-of-process package manager. Unhandled errors automatically invoke the interactive debugger rather than panicking. Standalone executables, which are quite large, are actually lisp "images": dumps of all data from a running lisp process (running processes can be dumped and restored at any time).</p><p>This interactivity changes the programming experience dramatically. I frequently find myself writing programs from the "bottom up", starting with an inner piece that I incrementally evaluate in the REPL and build on. Moreover, the feedback loop is tight; writing lisp is <em>fun</em>. </p><p>There are drawbacks here too. The problem with "images" is that the textual code and the image can diverge. The symptoms are starting up a fresh REPL only to be greeted by "The variable FOO is unbound". The root cause is usually having set some variable during a REPL session to a value that is defined further down in the code. A minor headache, as long as it doesn't get deployed to production.</p>]]></description></item><item><title>First impressions of Nix</title><link>https://markhudnall.com/2021/01/27/first-impressions-of-nix/</link><pubDate>Tue, 26 Jan 2021 16:00:00 -0800</pubDate><description><![CDATA[<p>Nix is package management from the future. But like <a href='https://everything2.com/title/Starseed+Transmissions'>other transmissions from our future selves</a>, it's tough to understand what Nix really is, why it matters, and what you can do with it. </p><p>I started using Nix and I'm not looking back. Let me tell you how I think about Nix and why it's worth learning.</p><p><b><i>Caveat lector:</i></b> Nix is difficult to get started with on macOS. For more thoughts on this and other pain points, see <a href='#challenges'>Challenges</a>. I encourage perseverance (and perhaps a stiff drink) as you explore this brain-changing technology.</p><h2 id="what&#95;is&#95;nix?">What is Nix?</h2><p>Nix is a package manager like <a href='https://brew.sh/'>Homebrew</a> or <a href='https://wiki.archlinux.org/index.php/Pacman'>pacman</a>. We can install ripgrep with Nix to get a feel for it:</p><pre><code class="sh">$ nix-env --install --attr nixpkgs.ripgrep
installing 'ripgrep-12.1.1'
building '/nix/store/0l147binjrsqsq9bnh1zn2xnfnmxv2lf-user-environment.drv'...
created 708 symlinks in user environment
</code></pre><p>ripgrep is now installed:</p><pre><code class="sh">$ rg --version
ripgrep 12.1.1
-SIMD -AVX &#40;compiled&#41;
+SIMD +AVX &#40;runtime&#41;
</code></pre><p>Where did Nix install it?</p><pre><code class="sh">$ which rg
/Users/mark/.nix-profile/bin/rg

$ readlink $&#40;which rg&#41;
/nix/store/43m8p9f7zbjnf959rhx5mzls5c28y2gk-ripgrep-12.1.1/bin/rg
</code></pre><p>With Nix, package names (<code>43m8p9f7zbjnf959rhx5mzls5c28y2gk-ripgrep-12.1.1</code>) are constructed by hashing a package's source files with the names of all its dependencies. A human-readable name is then appended to this hash. This means that if the source of a package or any of its dependencies change, the name of the package changes too.</p><p>Packages reside in the <strong>Nix store</strong>, which is just the directory <code>/nix/store</code>. Nix requires that all package dependencies also be in the Nix store. In this way, the Nix store forms a graph where nodes are packages and edges are dependency relationships.<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><p>Nix also has an <strong>expression language</strong>, which is used to define packages. With Nix, these package definitions are called derivations. The syntax is somewhat alienating for newcomers, so let's look at an example to familiarize ourselves. Here is the derivation for ripgrep, which is <a href='https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/text/ripgrep/default.nix'>available on</a> <strong>nixpkgs</strong>, Nix's primary package repository:</p><pre><code class="nix">{ stdenv
, fetchFromGitHub
, rustPlatform
, asciidoctor
, installShellFiles
, Security
, withPCRE2 ? true
, pcre2 ? null
}:

rustPlatform.buildRustPackage rec {
  pname = &quot;ripgrep&quot;;
  version = &quot;12.1.1&quot;;

  src = fetchFromGitHub {
    owner = &quot;BurntSushi&quot;;
    repo = pname;
    rev = version;
    sha256 = &quot;1hqps7l5qrjh9f914r5i6kmcz6f1yb951nv4lby0cjnp5l253kps&quot;;
  };

  cargoSha256 = &quot;03wf9r2csi6jpa7v5sw5lpxkrk4wfzwmzx7k3991q3bdjzcwnnwp&quot;;
  cargoBuildFlags = stdenv.lib.optional withPCRE2 &quot;--features pcre2&quot;;

  nativeBuildInputs = &#91; asciidoctor installShellFiles &#93;;
  buildInputs = &#40;stdenv.lib.optional withPCRE2 pcre2&#41;
  ++ &#40;stdenv.lib.optional stdenv.isDarwin Security&#41;;
  // ...
  meta = with stdenv.lib; {
    description = &quot;A utility that combines the usability of The Silver Searcher with the raw speed of grep&quot;;
    homepage = &quot;https://github.com/BurntSushi/ripgrep&quot;;
    license = with licenses; &#91; unlicense /&#42; or &#42;/ mit &#93;;
    maintainers = with maintainers; &#91; tailhook globin ma27 zowoq &#93;;
  };
}
</code></pre><p>We are looking at an anonymous function that takes a single argument, an attribute set. An attribute set is like a hashmap where keys are strings. The attribute set used as input argument has been destructured as part of the function definition and contains the keys <code>stdenv</code>, <code>fetchFromGitHub</code>, <code>rustPlatform</code>, <code>asciidoctor</code>, etc. The function calls <code>rustPlatform.buildRustPackage</code> to define the package, passing in another attribute set that specifies the configuration necessary to build ripgrep. In particular, it specifies that the ripgrep source (the <code>src</code> key) should be fetched from GitHub. Many of the details are hidden inside the function <code>buildRustPackage</code>, which ultimately specifies that <code>src</code> should be built using <a href='https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/rust/default.nix#L186'><code>cargo build</code></a>.</p><p>Note that the above function only has access to its input arguments. These input arguments are either utilities functions and namespaces (like <code>stdenv</code>, <code>fetchFromGitHub</code>, and <code>rustPlatform</code>) or other packages (like <code>asciidoctor</code> and <code>Security</code><a href='#fn-2' id='fnref2'><sup>2</sup></a>), both defined using the Nix expression language.</p><p>If your package relies on other packages as build or runtime dependencies, you'll declare these dependencies using the Nix expression language, as ripgrep does above with <code>nativeBuildInputs</code> and <code>buildInputs</code>. Nix computes the full path to those dependencies (something like <code>/nix/store/&lt;a-hash&gt;-your-dependency</code>) and makes them available through <code>$PATH</code> or other environment variables when it actually builds your package. Nix makes sure those dependencies are built before it builds your package.</p><p>So when ripgrep is built by Nix, it is actually built using Nix-packaged <code>rustc</code> and <code>cargo</code>  (<code>/nix/store/189i8cpfdr758nplhviw59qcp539q4l2-rustc-1.49.0/bin/rustc</code> and <code>/nix/store/d6bynqj12ak4dqqgk1wvw3pwrxym9xw3-cargo-1.49.0/bin/cargo</code> respectively at the time of writing).<a href='#fn-3' id='fnref3'><sup>3</sup></a></p><h2 id="the&#95;big&#95;idea">The big idea</h2><p>To recap: Nix names packages by hashing their source files along with the names of all their dependencies. Thus, updating a package's source or any of its dependencies changes this hash, resulting in a new package with a new name. Nix puts packages and their dependencies in the Nix store, so it has a global view of all packages. Since changes to packages always result in a new name, the Nix store is append-only. </p><p>The implications of this are staggering:</p><ul><li>Multiple versions of the same package can peacefully coexist on the same system, since they are guaranteed to have different names.</li><li>Once a package is built (for a given platform), it has a globally unique name and can thus be globally cached. In fact, Nix does this automatically, so most packages are actually just downloaded from <a href='http://cache.nixos.org/'>cache.nixos.org</a> rather than built from source on your computer.</li><li>Rollbacks to previous versions are trivial: just change symlinks back to what they were before. Nix tools like <code>nix-env --rollback</code> make this easy to do.</li></ul><h3 id="a&#95;motivating&#95;example:&#95;homebrew&#95;and&#95;openssl">A motivating example: Homebrew and openssl</h3><p>To better understand this paradigm shift, consider <a href='https://github.com/rbenv/ruby-build/issues/1353'>this issue</a> regarding Homebrew, openssl, and rbenv or <a href='https://github.com/pyenv/pyenv/issues/1686'>this similar one</a> for pyenv. Or consider the dreaded <a href='https://stackoverflow.com/questions/59006602/dyld-library-not-loaded-usr-local-opt-openssl-lib-libssl-1-0-0-dylib'><code>dyld: Library not loaded</code></a> issues when upgrading macOS. I have encountered these issues myself, resulting in hours of frustration. Multiply this by the # of engineers in your org and you have real productivity loss, especially if your org keeps dependencies up-to-date or mandates regular OS updates (which it should).</p><p>Now these problems can be solved by hand. In the first case, openssl v1.0.x was end-of-lifed, so Homebrew dropped the formula that lets you build it. Unfortunately, old ruby versions rely on this old version of openssl, so it must be manually installed and the ruby build retried with <code>--with-openssl-dir=/path/to/openssl-v1.0.x</code><a href='#fn-4' id='fnref4'><sup>4</sup></a>. In the second case, openssl is dynamically linked at runtime, but its <a href='https://softwareengineering.stackexchange.com/questions/66305/what-is-a-dylib'>dylib</a> has disappeared during an OS upgrade. The path to the nonexistent dylib needs to be changed <a href='https://stackoverflow.com/a/29809480/826650'>with <code>install&#95;name&#95;tool</code></a> on the binary that uses it.</p><p>But here be dragons. The <a href='https://stackoverflow.com/a/59184347/826650'>highly upvoted and accepted answer</a> for the dylib issue has you re-link the old, end-of-lifed version of openssl. Another answer has you install openssl using <a href='https://stackoverflow.com/a/59462770/826650'>some random formula</a>. These are <strong>bad ideas</strong> for something like openssl. Yet, I have done these things myself because, like most developers, I just want to get on with the task at hand.</p><h3 id="so&#95;what's&#95;the&#95;underlying&#95;problem?">So what's the underlying problem?</h3><p>Rich Hickey sums it up well in his excellent talk, <a href='https://www.youtube.com/watch?v=oyLBGkS5ICk'>Spec-ulation</a>. The situation is something like this:</p><ul><li>Software has dependencies</li><li>Dependencies are referenced by name</li><li>Names are resolved by the "environment"</li><li>The environment changes out from under you, breaking name resolution</li></ul><p>Unsurprisingly, this pattern &mdash; let's call it "naming stuff" &mdash; pervades software design:</p><ul><li>Functions call other functions. Import statements set up the environment where function names can be resolved.</li><li>Import statements reference other namespaces. Package declarations (<code>package.json</code>, etc.) set up the environment where namespaces can be resolved.</li><li>Package declarations reference other packages by artifact name or URL. Package registries or DNS set up the environment where artifacts can be resolved.</li><li>Shells reference commands by name. <code>$PATH</code> sets up the environment where commands can be resolved to paths in the filesystem.</li><li>Filesystem paths are names too. <a href='https://en.wikipedia.org/wiki/Inode'>inodes</a> set up the environment where paths can be resolved to block locations on disk.</li></ul><p>The problem is that associations between names and their <a href='https://en.wikipedia.org/wiki/Referent'>referents</a> are mutable. Names, while convenient for human beings, hide changes in the environment. The nature of the relationship between names and their referents is a <a href='https://en.wikipedia.org/wiki/Ship_of_Theseus'>longstanding philosophical question</a>. Applied to programming, we might ask:</p><p>If I make a breaking change to a function, is it still the same function? </p><p>If I have openssl v1.0.2 and openssl v1.1.1, which one is "openssl"?</p><p><a href='https://semver.org/'>SemVer</a> is supposed to resolve this dilemma by separating breaking and non-breaking changes into major and minor/patch versions. But since there is no formal relationship between artifact names and namespaces, SemVer doesn't really fix the underlying issue. This becomes clear in "transitive dependency hell", when Package A depends on B and C, where B depends on D v1.0 and C depends on D v2.0. What are we importing when we write <code>import D</code>?</p><p>Nix solves this problem for packages by making every name correspond one-to-one with a referent<a href='#fn-5' id='fnref5'><sup>5</sup></a>. If a package's source or dependencies change, it is a different thing with a different name. There can be no question about which version the name "openssl" refers to, because Nix makes the name "openssl" impossible (or at least, makes it have only a single referent in the context of a given package that depends on it).</p><p>In essence, Nix makes the package environment append-only. New names can be added, but existing associations between names and their referents are immutable. </p><p>So to answer the age-old philosophical question, "ship of Theseus" is a symlink to <code>/nix/store/j2pic1a5ijcpbs494vdhdbafn7y50ppr-ship-of-theseus</code> that is updated to <code>/nix/store/rmqbimj5mqnshfr3rgffk8h0flx7k911-ship-of-theseus</code> when the first plank of wood is replaced.</p><h2 id="challenges">Challenges</h2><p>I ran into both practical and conceptual difficulties with Nix. Ultimately, my opinion is that Nix is hard to install and use for newcomers but that its problems can be overcome through education  and automation.</p><p>Here is a non-exhaustive list of head-scratchers I've encountered in my Nix journey to date.</p><h3 id="installing&#95;on&#95;macos&#95;catalina&#95;and&#95;later">Installing on macOS Catalina and later</h3><p>Nix is difficult to install on macOS. The primary issue is Catalina's root filesystem is read-only, so <code>/nix</code> cannot be created like a regular directory. Nix assumes that it has write access to <code>/nix</code> and derivations <a href='https://nixos.org/guides/nix-pills/install-on-your-running-system.html#idm140737320754336'>use absolute paths</a> when referring to other objects in the Nix store. The workaround, which has been automated <a href='https://nixos.org/manual/nix/stable/#sect-macos-installation'>by the Nix installer</a>, is to create a separate volume for the Nix store and mount it at <code>/nix</code>. </p><p>But the installer did not work for me; the Nix installer creates a volume that relies on the T2 chip's encryption at rest rather than FileVault, and my laptop does not have a T2 chip. This issue is <a href='https://github.com/NixOS/nix/pull/3692'>documented here</a>. As suggested <a href='https://nixos.org/manual/nix/stable/#sect-macos-installation-encrypted-volume'>by the docs</a>, the fix is to manually create a Filevault-encrypted volume. The installer does not do this automatically because of race conditions between services that use Nix on startup and mounting + decrypting the volume, which causes some applications to fail on startup. </p><p>Thankfully, an <a href='https://github.com/NixOS/nix/pull/4289'>open PR</a> is set to fix this race condition and automate creating the Filevault-encrypted volume during installation. I used the preview installer in the open PR's description to get up and running.</p><h4 id="nix-darwin">nix-darwin</h4><p>The next challenge was understanding and installing <a href='https://github.com/LnL7/nix-darwin'>nix-darwin</a>. nix-darwin's README describes it as:</p><blockquote><p> Nix modules for darwin, <code>/etc/nixos/configuration.nix</code> for macOS. </p></blockquote><p>Huh? Basically, nix-darwin gives you a way codify configuration for a macOS computer using the Nix expression language. Configuration ranges from networking and users to installed applications and CLI tools. This is the same role that NixOS plays for Linux, but less tightly integrated in nix-darwin due to macOS's more restrictive platform. With NixOS, I would configure my system by editing a file located at <code>/etc/nixos/configuration.nix</code>. With nix-darwin, the analogous file defaults to <code>&#126;/.nixpkgs/darwin-configuration.nix</code>.</p><p>For example, to define a user, I can write:</p><pre><code class="nix">users.users.mark = {
  name = &quot;mark&quot;;
  home = &quot;/Users/mark&quot;;
  shell = pkgs.zsh;
};
</code></pre><p>And I can install system-wide packages using:</p><pre><code class="nix">environment.systemPackages = &#91; pkgs.ripgrep &#93;;
</code></pre><p>When I run <code>darwin-rebuild switch</code>, nix-darwin updates my system to reflect any changes to the config by building new packags and updating symlinks on my <code>$PATH</code>. If the update fails for any reason, I can roll back to the previous version instantaneously with <code>darwin-rebuild --rollback</code>.</p><p>nix-darwin is structured internally using <a href='https://nixos.wiki/wiki/NixOS#Modules'>NixOS modules</a>, a convention where Nix files define available configuration options for some part of the system and then implement the configuration logic. The <a href='https://daiderd.com/nix-darwin/manual/index.html'>documentation</a> helps with understanding the available configuration options.</p><p>I ran into some issues installing nix-darwin that I can't remember now, but they were solved using workaround in various GitHub issues.</p><h4 id="applications&#95;and&#95;spotlight">Applications and spotlight</h4><p>A big issue I ran into was making Nix-installed macOS applications like Firefox work well with <a href='https://www.alfredapp.com/'>Alfred</a>. nix-darwin symlinks macOS applications built with Nix into <code>&#126;/Applications/Nix Apps</code>. This works fine if you use the dock to launch applications, but Spotlight does not index symlinks and so it is not possible to open these applications using Spotlight or Alfred. </p><p>At first, I tried to get Alfred to index my Nix store, but couldn't get this to work. A workaround suggested in <a href='https://github.com/LnL7/nix-darwin/issues/139'>this GitHub issue</a> is to use AppleScript to create macOS <a href='"https://en.wikipedia.org/wiki/Alias_(Mac_OS'>aliases</a>"), which, unlike symlinks, are indexed by Spotlight. Using AppleScript seems like a hack. Another user suggests a similar workaround <a href='https://github.com/NixOS/nix/issues/1278#issuecomment-633934039'>using a Swift script</a> to create these aliases.</p><p>I ended up combining these workarounds into a custom module. You can see the Nix module in my config <a href='https://github.com/landakram/nix-config/blob/master/link-apps/default.nix'>here</a>. The module is enabled with the following line in my nix-darwin configuration:</p><pre><code class="nix">services.link-apps = {
  enable = true;
  userName = config.users.users.mark.name;
  userHome = config.users.users.mark.home;
};
</code></pre><p>Applications that are installed with Nix are now aliased into <code>&#126;/Applications/Nix</code>, which can be indexed by Alfred. I also needed to configure Alfred to index aliases by going to <code>Alfred Preferences -&gt; Features -&gt; Default Results -&gt; Extras -&gt; Advanced...</code> and dragging in one of the aliases in <code>$HOME/Applications/Nix</code>.</p><p>It still feels like an ugly workaround, but it has worked well for my purposes ever since.</p><h3 id="paper-cuts">Paper-cuts</h3><p>Beyond the installation issues and conceptual hurdles (Nix's novel paradigm of content-addressing packages), Nix gave me some paper-cuts. These tidbits of <a href='https://en.wikipedia.org/wiki/No_Silver_Bullet'>accidental complexity</a> raise the barrier to entry but aren't inherent to Nix's new paradigm. </p><h4 id="nix&#95;expression&#95;language">Nix expression language</h4><p>Nix requires learning the Nix expression language, a purpose-built language that isn't re-usable in other contexts. I quickly needed to understand and wield the language when I ventured beyond just installing packages with <code>nix-env</code> into creating reproducible environment with nix-darwin + <a href='https://github.com/nix-community/home-manager'>home-manager</a> and, for projects, <a href='https://nixos.wiki/wiki/Development_environment_with_nix-shell'>shell.nix</a> files.</p><p>Now that I'm more familiar with it, I actually like it a lot. But it created a higher upfront cost to learning Nix. I could just as easily see Nix working with YAML, widely used in automation tooling, but I suppose that DSLs need to be learned irrespective of the host language, and Nix's expression language gives it the power of modularity. So maybe I'm just being grumpy.</p><h4 id="everything&#95;is&#95;an&#95;attribute&#95;set">Everything is an attribute set</h4><p>Nix attribute sets are nice data structures. nixpkgs is basically a big, nested attribute set, hence installing a package with e.g. <code>nix-env -iA nixpkgs.graphviz</code> involves naming a derivation nested inside the top-level <code>nixpkgs</code> attribute.</p><p>nixpkg utility functions such as <a href='https://github.com/NixOS/nixpkgs/blob/93b430bc6ba3c084d66f96546dd7b95a2835eceb/lib/options.nix#L58'><code>mkOption</code></a> or <a href='https://github.com/NixOS/nixpkgs/blob/93b430bc6ba3c084d66f96546dd7b95a2835eceb/pkgs/development/compilers/rust/make-rust-platform.nix#L14-L16'><code>buildRustPackage</code></a> are also defined using attribute sets. </p><p>The facts that everything is an attribute set, the Nix expression language is dynamically typed, and documentation is sparse make discoverability a challenge. I often find myself poking around the nixpkgs source, hunting down function definition or derivations so I can see their inputs and understand what they do. As before, this steepens the learning curve.</p><h4 id="cli&#95;tools">CLI tools</h4><p>Nix has many top-level CLI tools. There is <code>nix</code>, <code>nix-env</code>, <code>nix-shell</code>, <code>nix-store</code>, <code>nix-build</code>, <code>nix-channel</code>, <code>darwin-rebuild</code> (or <code>nixos-rebuild</code>), and others, for example. The self-titled tool, <code>nix</code>, is used to set global configuration, while the others are used for Nix's various subsystems.</p><p>These CLI tools reflect Nix's breadth, but I wish there was just one top-level <code>nix</code> command and everything else was a subcommand. <code>nix</code> <em>does</em> have subcommands, but there are sometimes slight differences in functionality. For example, there's <code>nix develop</code> but also <code>nix-shell</code>. They have differences, but which one should I be using?<a href='#fn-6' id='fnref6'><sup>6</sup></a></p><h3 id=""now&#95;i&#95;have&#95;two&#95;build&#95;tools"">"Now I have two build tools"</h3><p>I've been using Nix for projects as well. I think of Nix as a superset of language-specific package managers like ruby's bundler and version managers like rbenv. In addition to managing packages and language versions, I can use Nix to install CLI tools that aren't language specific. Combined with <a href='https://github.com/target/lorri'>lorri</a> and <a href='https://direnv.net/'>direnv</a>, all the tools I need when working on a given project are available when I <code>cd</code> into its repo.</p><p>But I find that using Nix for package management in projects is awkward. It makes sense: Nix makes builds reproducible by creating a content-hash for each dependency, but we have to bring builds into Nix-land to do this. So there are additional tools that convert dependency declarations like a <code>Gemfile</code> or <code>go.mod</code> into a bunch of Nix derivations in a <code>.nix</code> file.<a href='#fn-7' id='fnref7'><sup>7</sup></a> I could see these getting out of date, especially when I'm new to Nix and my head is more in the language-specific tools (this could be solved with linting). </p><p>Moreover, there are subtle differences between the language tools and Nix. For example, both ruby and python allow packaging pre-compiled, platform-specific binaries rather than having users build from source. I don't know enough about what Nix does here under the hood, but it chooses to build from source and has failed for me in cases where the language specific tool doesn't. Theoretically, Nix builds packages in isolation, so perhaps the snags come from the impure parts of Nix that bridge to a specific platform. Or perhaps some packages have build instructions hard-coded for platforms that bypass Nix's attempts to sandbox builds. Either way, it's frustrating enough that, for the most part, I use Nix to bring in language-agnostic tooling but continue to use language-specific package managers.</p><p>Docker sort of solves this with <a href='https://docs.docker.com/develop/develop-images/multistage-build/'>multi-stage builds</a>. But Docker is more about creating reproducible <em>run</em> environments (where the run environment can also be used to help build another container) rather than reproducible builds. It doesn't prevent you from specifying <code>&quot;latest&quot;</code> for your dependencies, whereas Nix always requires a hash, effectively pinning versions even if one is not explicitly specified. On the other hand, for Nix to create reproducible builds, the sources must be available somewhere.</p><p>Whatever, I can just pin versions using my language-specific package manager and get on fine with Docker. But I much prefer developing on the host if I can. Docker has real costs: the images can be huge and Docker is layered with complexity. Docker on macOS is resource hungry, slow, and probably always will be because it is virtualized. For deployment, I love Docker. Unfortunately, I haven't used NixOS or <a href='https://github.com/NixOS/nixops'>nixops</a> enough to compare my experiences there.</p><h2 id="resources">Resources</h2><p>Despite my gripes, I still think Nix is <a href='https://en.wikipedia.org/wiki/Solarpunk'>solarpunk</a>. It is a category-defining tool, and I hope its ideas become the backbone of software development. It has an elegance, and I appreciate that a globally shareable cache that benefits all developers springs forth naturally from this.</p><p>A few resources have been invaluable on my Nix journey. Perhaps they will be helpful to you too.</p><ul><li><a href='https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs'>Burke Libbey's "Nixology" videos</a>. These are excellent, practical videos on using Nix on macOS. Just enough detail about what's going on under the hood to pique my interest. Start here.</li><li><a href='https://christine.website/blog/how-i-start-nix-2020-03-08'>Christine Dodrill's "How I Start: Nix"</a>. This was a huge help for understanding Nix in projects. Christine's other posts on Nix and NixOS are fantastic too.</li><li><a href='https://nixos.org/guides/nix-pills/index.html'>Nix pills</a>. The official guide. Excellent for understanding what's going on underneath but maybe not the best starting point for practical use.</li><li><a href='https://lawrencedunn.io/posts/2020-03-20-how-nix-instantiation-works/'>Lawrence Dunn's "How Nix Derivation Instantiation Works"</a>: A great deep drive into how Nix derivations are instantiated, that is, how we go from Nix expressions to hashes and build instructions.</li><li><a href='https://nix.dev/'>nix.dev</a>. Useful supplemental docs and style guide.</li></ul><p>Good luck.</p><ol class='footnotes'><li id='fn-1'>Nix provides tools for inspecting the relationships between packages. For example, I can see all the dependencies of ripgrep by running <code>nix-store --query --requisites /nix/store/43m8p9f7zbjnf959rhx5mzls5c28y2gk-ripgrep-12.1.1</code>.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>The macOS <a href='https://developer.apple.com/documentation/security'>Security framework</a> packaged <a href='https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/darwin/apple-sdk/frameworks.nix#L99'>for Nix</a>.<a href='#fnref2'>&#8617;</a></li><li id='fn-3'>You can verify this by running <code>nix-shell '&lt;nixpkgs&gt;' -A ripgrep</code> and then <code>which cargo</code>. <code>nix-shell</code> puts you into the environment that Nix uses to build a given package.<a href='#fnref3'>&#8617;</a></li><li id='fn-4'>Actually, <code>ruby-build</code> was reworked to stop looking for Homebrew's version of openssl so this shouldn't be necessary anymore. Instead, it will download the version of openssl that it needs if it doesn't already exist. <code>pyenv</code> still looks for Homebrew's openssl and so still suffers from this problem.<a href='#fnref4'>&#8617;</a></li><li id='fn-5'>For solving the same problem in code, I'm really excited about <a href='https://www.unisonweb.org/'>Unison</a>. In particular, check out the documentation on <a href='https://www.unisonweb.org/docs/refactoring/'>Refactoring and modifying code in Unison</a>. It's a trip. Unfortunately, it's hard to imagine Unison being used widely because it is both an entirely new paradigm and programming language. Of course, Nix is both of these things as well...<a href='#fnref5'>&#8617;</a></li><li id='fn-6'>FWIW, I use <code>nix-shell</code>.<a href='#fnref6'>&#8617;</a></li><li id='fn-7'>For <code>Gemfile</code>, it's <a href='https://github.com/nix-community/bundix'>bundix</a> and for <code>go.mod</code>, it's <a href='https://github.com/nix-community/vgo2nix'>vgo2nix</a>.<a href='#fnref7'>&#8617;</a></li></ol>]]></description></item><item><title>Widening circles</title><link>https://markhudnall.com/2019/09/02/widening-circles/</link><pubDate>Sun, 01 Sep 2019 17:00:00 -0700</pubDate><description><![CDATA[<blockquote><p> I live my life in widening circles <br /> that reach out across the world. <br /> I may not complete this last one <br /> but I give myself to it. <br /></p><p> I circle around God, around the primordial tower. <br /> I’ve been circling for thousands of years <br /> and I still don’t know: am I a falcon, <br /> a storm, or a great song? <br /></p><p> &ndash; Rainer Maria Rilke (translated by Joanna Macy and Anita Barrows)     </p></blockquote><p>The following generative art piece is made by repeatedly drawing circles with smaller and smaller diameters. <a href='https://en.wikipedia.org/wiki/Perlin_noise'>Perlin noise</a> is applied to both the colors and positions to produce some variation.</p><p>You can click the piece (or refresh the page) to see a new rendition of it.</p><p><div class="sketch" id="sketches-circles"></div></p><p>The piece was inspired by the first 2 chapters of <a href='http://zenbullets.com/book.php'>Generative Art</a> by Matt Pearson, which has been a joy. Some selected quotes from its prose:</p><p>1.</p><blockquote><p> Without giving it much thought, we have turned into augmented beings existing in a world that is simultaneously real and virtual. </p></blockquote><p>2.</p><blockquote><p> Computing is what a stream does as it finds its way downhill toward the ocean. It’s what the planets do as they move in their orbits. It’s what our bodies do as they maintain the balance needed to keep us upright. It’s what our DNA does as it unravels. Computing is what I’m doing now as I process these ideas and output them as text—and what your brain is doing as you read the words and form your own ideas as a result. <br /></p><p> This is why I can say, without contradiction, that while I still find computers boring, I think computing is cool. The only place computers really come into it is in attempting to simulate these computations or creating new ones to rival those of the natural world. </p></blockquote><p>3.</p><blockquote><p> With design, the intention is to produce a visual that produces the same response in everyone who sees it—the intention (such as “street,” “retro,” or “subtle”) should be mostly unambiguous. With art, you’re still aiming to produce a response, but if that response is different in different people that doesn’t matter. It’s fine for one person to like a piece while another sneers. Even better, if one viewer loves the work, we would hope another might hate it. If we can foster such an extremity of reaction, it’d be a measure of success. Perhaps the only cardinal sin of art is to be boring. </p></blockquote><p>4.</p><blockquote><p> Like the landscape gardener, the lot of the generative artist is to take naturally evolving phenomena and to fashion them into something aesthetically pleasing. It’s finding that point of balance between the beautiful unruliness of the natural world and the desired order of our ape brains. A garden that is unkempt and overgrown is unpleasing to us because it’s too far into the realm of the chaotic, whereas concreting the area instead is the tidiest, most ordered of solutions, which also removes all beauty. <br /></p><p> The sweet spot is between the two, where the grass is neat and evenly cut but still no two blades are alike or move in perfect synchronicity—where the colors of the flowers are evenly balanced, but not in a way that is exact and precise. The sweet spot is where the “art” lives. </p></blockquote><p>5.</p><blockquote><p> With generative art, the autonomous system does all the heavy lifting; the artist only provides the instructions to the system and the initial conditions. <br /></p><p> The artist’s role in the production process may be closer to that of a curator than a creator. You create a system, model it, nurture it, and refine it, but ultimately your ownership of the work produced may be no more than a parent’s pride in the work of their offspring. </p></blockquote><p>6.</p><blockquote><p> The purpose of a tool is not only to extend our capabilities; it should also enhance the flow of our creativity. The newest software gives us the power to fashion the world in ways that would have been unimaginable only 50 years ago, but there is still a long way to go in terms of a natural artistry to their use.<br /></p></blockquote>]]></description></item><item><title>Starting Figwheel in Emacs</title><link>https://markhudnall.com/2016/04/25/starting-figwheel-in-emacs/</link><pubDate>Sun, 24 Apr 2016 17:00:00 -0700</pubDate><description><![CDATA[<p>When I use Emacs to write ClojureScript, I often jack in to CIDER just to start Figwheel and get to the ClojureScript REPL. After running <code>M-x cider-jack-in</code>, I would type in the REPL: </p><pre><code class="clojure">user&gt; &#40;use 'figwheel-sidecar.repl-api&#41;
user&gt; &#40;start-figwheel!&#41;
user&gt; &#40;cljs-repl&#41;
</code></pre><p>Turns out, there's a faster way to do this using the <code>cider-cljs-lein-repl</code> variable. Add the following to your Emacs config:<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><pre><code class="emacs-lisp">&#40;setq cider-cljs-lein-repl
      &quot;&#40;do &#40;require 'figwheel-sidecar.repl-api&#41;
           &#40;figwheel-sidecar.repl-api/start-figwheel!&#41;
           &#40;figwheel-sidecar.repl-api/cljs-repl&#41;&#41;&quot;&#41;
</code></pre><p>Now, when I'm in a ClojureScript project, I run <code>M-x cider-jack-in-clojurescript</code> instead of <code>M-x cider-jack-in</code>. The value of <code>cider-cljs-lein-repl</code> is used to start the ClojureScript REPL, so figwheel starts automatically and puts me right into the cljs REPL. Magic!</p><ol class='footnotes'><li id='fn-1'>I put this in the <code>:config</code> block of a <a href='https://github.com/jwiegley/use-package'>use-package</a> declaration for CIDER, if you're into that sort of thing.<a href='#fnref1'>&#8617;</a></li></ol>]]></description></item><item><title>Depth-first and breadth-first thinkers</title><link>https://markhudnall.com/2015/12/21/depth-first-and-breadth-first-thinkers/</link><pubDate>Sun, 20 Dec 2015 16:00:00 -0800</pubDate><description><![CDATA[<p>This piece is about working on teams.</p><p>Consider this problem: you're walking along a trail in the dense forest and you need to find your way out. In front of you, the trail forks over and over again as far as you can see. The exit might be miles away, or it might be a 5-minute walk down one of the forks &ndash; you're so turned around that you have no idea.</p><p>If you were a poet, you might take the road less traveled. In computing, however, this is a very clear <a href='https://en.wikipedia.org/wiki/Tree_traversal'>tree traversal problem</a>, and there are two methodical ways to go about it.</p><h2 id="depth-first&#95;search">Depth-first search</h2><p>With depth-first search, you go as far as you can down one path before you backtrack.</p><p>For instance, you keep walking down the rightmost path, ignoring all the forks, until you reach a dead-end. Then, you backtrack to the last fork with a road you hadn't taken and try that one, following the rightmost path like you did before. Reached a dead-end? You backtrack and repeat the process. </p><p><img src="/img/dfs.png" alt="" /></p><h2 id="breadth-first&#95;search">Breadth-first search</h2><p>With breadth-first search, you explore all the paths closest to you before moving deeper.</p><p>For example, you walk down the path on the right until you reach a fork. If you don't see a way out, you backtrack and walk down the path on the left. Still nothing? You backtrack again, back to path on the right to explore the two paths that lead from there. Then you repeat with the path on the left.</p><p><img src="/img/bfs.png" alt="" /></p><p>You can imagine the trade-offs of both: </p><ul><li>With depth-first search, you go <em>really</em> far down one path really quickly. That works out 👍for you if the exit happens to be far away, but if the exit is down the other path and really close, you won't discover it for a while.</li><li>With breadth-first search, it takes a long time to reach an exit that's far away, but you'll never miss an exit on a path that's really close by.</li></ul><p>Tree traversal algorithms like DFS and BFS are used in many computing disciplines. For example, you can represent a chess game as a tree, where each "fork in the road" represents a different board configuration and each road is a possible move by one of the players. If you could explore this tree quickly, you could look ahead in the game and always make a move that gives you a leg up. Armed with this tree, a computer becomes a worthy chess opponent. </p><h2 id="thinking&#95;as&#95;a&#95;tree">Thinking as a tree</h2><p>When you're starting a project or exploring a new idea, your thinking is like a tree. Each problem you need to solve relates to the last. Each idea branches into many others, until finally, the full scope of your project or idea stands in front of you.<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><p>You'd obviously like to enumerate this scope. This begs a question you should ask yourself: How do <em>I</em> naturally walk this tree? <strong>Am I a depth-first or breadth-first thinker?</strong></p><p><img src="/img/thinking_as_a_tree.png" alt="" /></p><h2 id="working&#95;on&#95;a&#95;team">Working on a team</h2><p>This process of discovery, like finding the exit in a winding forest, takes some time. And frequently, you're doing it with a slew of other folks in a room somewhere, possibly with a whiteboard.</p><p>When I'm working collaboratively like this, a couple things tend to happen:</p><ul><li>Someone says something that I feel is irrelevant</li><li>Someone moves too quickly in one direction and I can't follow what they're saying</li></ul><p>These encounters can be frustrating, but here's the thing: <em>everyone in the room is traversing the tree.</em> We're all just in different places along the BFT&mdash;DFT spectrum.</p><p>So the second question to ask yourself is: <strong>Which of my teammates are depth-first thinkers, and which are breadth-first?</strong></p><p>When you pose this question, you begin to understand why a detail that feels irrelevant to you matters to someone else (<em>what path are they on compared to my own?</em>). You also come to know why someone's thinking can move so quickly in one direction (<em>how deep down a path are they compared to me?</em>)</p><p><img src="/img/working_with_a_tree_team.png" alt="" /></p><p>Let's go back to the forest for a second. </p><p>Imagine now that, instead of being lost by yourself, all of your teammates are with you. By now, you've figured out whether you're a depth-first thinker or a breadth-first thinker. You'll be able to find an exit more quickly by nature of the fact that you have more people to help you.</p><p>But if your teammates all think like you, you'll go down the same path together and you won't be any better off than when you were alone.</p><p><strong>People who think differently than you see things that you can't.</strong></p><p>If you're working on a team, first recognize what kind of thinker you are. Then, recognize what kinds of thinkers your teammates are. You'll be more patient and create better ideas.</p><p>If you're building a team, seek out different kinds of thinkers. They'll give you vision that's impossible without them.</p><p>Otherwise, you'll miss the tree for the forest.</p><ol class='footnotes'><li id='fn-1'>Thinking as a tree is a simplification. Your thinking is probably more like a <a href='https://en.wikipedia.org/wiki/Graph_&#40;mathematics&#41;'>graph</a> since ideas <em>between</em> branches are also interrelated. The concept still holds, since one <a href='https://en.wikipedia.org/wiki/Graph_traversal'>traverses a graph</a> in the same manner.<a href='#fnref1'>&#8617;</a></li></ol>]]></description></item><item><title>Try</title><link>https://markhudnall.com/2015/05/19/try/</link><pubDate>Mon, 18 May 2015 17:00:00 -0700</pubDate><description><![CDATA[<p>I tie my self-worth to what I do and whether I succeed. I call this the <em>“Do or do not, there is no try”</em> philosophy.<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><p>But I can spend all day <em>doing</em> without really <em>trying</em>. When it comes to my self-worth, the more important philosophy is simpler:</p><p><em>Try.</em></p><p>When I follow the <em>“Do or do not”</em> philosophy, I pin my self-worth to whether I did something or didn’t, however improbable the odds of success. I end up judging myself by things that are out of my control. When the odds aren’t in my favor, I become afraid to even begin.</p><p>When I <em>try</em>, I’m pushed to my limit, which isn’t always far enough to succeed.</p><p>In other words, I fail.</p><p>At so many things.</p><p>When I try and fail, I learn. When I learn, I get better.</p><p><em>Doing</em> has never been the destination, but rather, the false means I’ve come up with to achieve a truer goal: to live with myself and love myself.</p><p><em>Trying</em> never purports to be a destination, but it leads me… <em>somewhere</em>. It brings into focus my edges, the uncomfortable demarcations of territory where beyond is what I can be, but am not yet.</p><p>As my edges become clear, I can begin to truly know them: winding coastlines formed of insecurity, doubt. I can poke and prod them and find their soft spots. I can accept them and love them as parts of me, as integral as my skills or confidence or <em>doings</em>.</p><p>And I can keep pushing.</p><ol class='footnotes'><li id='fn-1'>Only a Sith deals in absolutes.<a href='#fnref1'>&#8617;</a></li></ol>]]></description></item><item><title>Friends</title><link>https://markhudnall.com/2014/04/10/friends/</link><pubDate>Wed, 09 Apr 2014 17:00:00 -0700</pubDate><description><![CDATA[<p>The other night, I met an Israeli couple who recently moved from Tel Aviv to the Bay Area. They'd lived in Israel their whole lives and it was their first time living abroad in the US. She is getting her master's degree, and he is working in Silicon Valley.</p><p>During our conversation, I asked what the hardest part of moving to California was.</p><p>"It took some time to adapt to American culture. Being in the Bay Area surrounded by tech helps, because we can still speak that common language."</p><p>"What <em>is</em> the difference between US and Israeli culture?" I asked.</p><p>"How often do you see your parents?"</p><p>I told them my parents live in the South Bay, not too far away, but I still see them less than I should, once or twice a month.</p><p>"Back in Israel, I saw my parents almost every day. The friends I grew up with, I saw almost every day. In the US, you make friends, great friends, in college. You become close, but then your friends might move across the country for work or you might move away for work, and you make new friends depending on where you are and who you're with.</p><p>"Part of that is because Israel is so much smaller. It's <em>easier</em> to go out for a drink with your friends every day. And that made it a lot harder to learn how to do <em>this</em>."</p><p>He gestured out to the crowd of 15 or so people talking and having dinner in the small house. I was invited over by a friend I met the week before and I knew only 3 of the 15 people there.</p><p>"But walking into this house by myself to talk to people I've never met is terrifying for me too," I said.</p><p>"You have no idea. For you, this is normal. It might feel uncomfortable, but it happens all the time, and you adapt."</p><p>"Back home, relationships are ..." he paused, searching for the right word, "<em>deeper</em>. There, you learn how to connect deeply with people, the same people. Here, you learn how to interact with new people."</p><p>I thought about my roommates from college, who are now spread all over the world. We half-joke over Skype about how we're going to move into a 5-story house someday with our families and live together again. The reality is that they're far away, and who knows what forces will bring us back together as our lives take shape.</p><p>"Which kind do you think is better?" I asked, "The depth or the breadth?"</p><p>They both shook their heads without hesitation.</p><p>"The question isn't 'Which is better?' as much as 'How do I survive?'"</p>]]></description></item><item><title>Kindness is a Skill</title><link>https://markhudnall.com/2013/12/27/kindness-is-a-skill/</link><pubDate>Thu, 26 Dec 2013 16:00:00 -0800</pubDate><description><![CDATA[<p>Imagine that I call you up one day (we're good friends, on first name basis for years and everything), and I ask you to build me a house. Of course, you're very willing to build me a house (because we're such good friends), but you don't know the first thing about it. But I implore you.</p><p>You are distraught because you don't know where to begin. It's not like you were born knowing how to build a house — that would be very improbable. It would be like if you were born knowing how to read or write a novel or public-speak or play the cello professionally. At any rate, you'd really, really like to build this house.</p><p>So you start from the beginning. Maybe you nail together two pieces of wood. But you've never wielded a hammer, so it's hard the first time. You practice nailing two pieces of wood together until it becomes easy, and then you build larger structures using more than two pieces of wood. After you've mastered that, maybe you try building a whole wall.</p><p>You keep building and practicing and eventually you build a house. And after you've built a couple houses, you become really good at it, and you build me a beautiful house and we become even better friends because you often come over and we drink tea and talk about books or just sit around.</p><p>But learning how to build houses was <em>never</em> easy. Remember when you thought you couldn't do it because you had no idea how to begin? When I asked you to build me a house, you could have told me, "I can't build you a house because I don't have the mind for it. I'm just not able to. It's not in my nature." A lot of people seem to take this attitude toward math and programming, that they'll never be able to figure it out, even though, like building a house, these things are iterative processes of learning that take time and effort. It's probably true that it's naturally easier for some people to build houses. But nobody was born knowing how to build a house. They had to figure it out, and figuring things out is <em>hard</em>. You can seek more skilled carpenters' and architects' advice, but at the end of the day, you still need to expend effort to develop your own house-building skill.</p><p>Now imagine that you and I are not friends and that we don't even know each other. Imagine instead that you believe you are selfish and kind of an asshole, but you wish to be kind. Sometimes you say terrible things and your behavior often benefits yourself at the expense of others.</p><p>But you feel guilty about the way you are.</p><p>You want to be kind.</p><p>But you aren't.</p><p>You look at your friends who are generous and who consistently stick their necks out for you in situations you'd probably just avoid, and you think to yourself, "Dammit, they are so kind."</p><p>"And I am not."</p><p>You feel even more guilty because you see other people being kind, and you're unsure why you aren't able to act that way. Is there something wrong with you deep down? Maybe you start to believe that it's not in your nature. And you feel even worse.</p><p>But maybe it occurs to you that feeling guilty about not being kind is like feeling guilty for not knowing how to build a house when your carpenter and architecture friends do it with such ease.</p><p>Maybe it occurs to you that nobody was born knowing how to be kind. (I mean, do you remember being a kid? They aren't always the <a href='https://www.youtube.com/watch?v=5HbYScltf1c'>nicest</a> <a href='https://www.youtube.com/watch?v=yWmeB7mY_E0'>bunch</a>.)</p><p>Maybe it occurs to you that learning anything when you know nothing is <em>hard</em>, but the more you build and practice, the better you become. The more you learn about what it means to be kind. The more you learn about what it means to empathize. The more you see the house instead of the two pieces of wood nailed together.</p><p>Maybe you begin to understand how being kind of an asshole is also a skill, and that being kind of an asshole more frequently makes it easier to be kind of an asshole.</p><p>Maybe you realize that kindness must be practiced, that kindness becomes easier, but greater kindness is always challenging.</p><p>Not because you're fighting against your nature, but because you're learning.</p>]]></description></item><item><title>Handling GCM messages in the foreground and background</title><link>https://markhudnall.com/2013/11/13/gcm-foreground-and-background/</link><pubDate>Tue, 12 Nov 2013 16:00:00 -0800</pubDate><description><![CDATA[<p>When the <a href='https://getclef.com'>Clef</a> Android app gets notifications, we want it to behave differently when it's open and in the foreground than when it's in the background.</p><p>This is a surprisingly difficult thing to do, since it's actually quite difficult to determine whether an app is in the background. You can use a static boolean or keep track of the shown activity (maybe in a custom <code>Application</code> class or another singleton), but that isn't always reliable. You might also have other requirements—what if you want to differentiate behavior based on which activity is in the foreground?</p><p>One <a href='http://stackoverflow.com/a/15949723/826650'>solution</a> is <code>sendOrderedBroadcast</code>, but I prefer something with a little less boilerplate.</p><h2 id="all&#95;aboard&#95;the&#95;event&#95;bus">All aboard the event bus</h2><p>Instead of using <code>BroadcastReceivers</code>, we can use an event bus like <a href='http://square.github.io/otto/'>Otto</a> or <a href='https://github.com/greenrobot/EventBus'>EventBus</a> to notify activities about an incoming GCM message. If no activities are registered on the bus, we can correctly place a notification in the notification drawer.</p><p>If you aren't familiar with event buses, the idea is simple. Any object (usually an <code>Activity</code>) can register with (or as I like to say, ride) the event bus:</p><pre><code>bus.register&#40;this&#41;;
</code></pre><p>The object then provides subscriber methods to run when the bus emits an event:</p><pre><code>public void onEvent&#40;NotificationEvent event&#41; {
    Toast.makeText&#40;this, 
        event.payload.getString&#40;&quot;message&quot;&#41;, 
        LENGTH&#95;SHORT&#41;
    .show&#40;&#41;;
}
</code></pre><p>When an object should stop riding the event bus, you can unregister it:</p><pre><code>bus.unregister&#40;this&#41;;
</code></pre><p>To actually emit events:</p><pre><code>NotificationEvent event = new NotificationEvent&#40;bundle&#41;;
bus.post&#40;event&#41;;
</code></pre><p>This triggers a call to the <code>onEvent&#40;NotificationEvent event&#41;</code> method in every object registered on the bus. You can add different subscriber methods (such as <code>onEvent&#40;LocationEvent event&#41;</code>) and these method will only be run when an event of the same type is emitted (<code>bus.post&#40;new LocationEvent&#40;&#41;&#41;</code>) There is no limit to how many objects can register with the bus.</p><p>If there are no objects registered, a second event is automatically posted. With Otto, this event is called <code>DeadEvent</code>. With EventBus, it's called <code>NoSubscriberEvent</code>. This lets you separately handle cases where there are no subscribers (you might see where this is going).</p><p>You can also post any object. I like to create classes that logically separate events and suffix them with <code>Event</code>. For instance, the <code>NotificationEvent</code> class looks like this:</p><pre><code>public class NotificationEvent {
    public Bundle payload;

    public NotificationEvent&#40;Bundle extras&#41; {
        this.payload = extras;
    }
}
</code></pre><h3 id="otto&#95;and&#95;eventbus">Otto and EventBus</h3><p>These libraries are very similar. <a href='http://square.github.io/otto/'>Otto</a> uses annotations (<code>@Subscribe</code>) to determine which subscriber methods to run, while <a href='https://github.com/greenrobot/EventBus'>EventBus</a> uses a consistent method name (<code>onEvent</code>).</p><p>Unfortunately, both libraries have drawbacks. Otto <a href='https://github.com/square/otto/issues/83'>doesn't let you</a> register with the bus in a superclass and receive events in a subclass. This is annoying if you'd like to register in a <code>BaseActivity</code> that all of your activities extend from.</p><p>EventBus has a bug when trying to subscribe to the <code>NoSubscriberEvent</code>. If you register and unregister an object, the event never fires. Bummer. There's a <a href='https://github.com/greenrobot/EventBus/pull/32'>pull request</a> that adds a <em>one line fix</em>, but the maintainers haven't touched it yet.</p><p>I ended up choosing EventBus because I really wanted to be able to register with the bus in a base class<a href='#fn-1' id='fnref1'><sup>1</sup></a>, but again, they are basically the same for most purposes. I did have to add the patch in <a href='https://github.com/greenrobot/EventBus/pull/32'>this pull request</a> to make it work.</p><h2 id="changing&#95;app&#95;behavior&#95;for&#95;gcm&#95;messages">Changing app behavior for GCM messages</h2><p>Here's how we use an event bus to do different things when the app is in the foreground or background.</p><p>We use a singleton event bus. The EventBus library provides one for you with <code>EventBus.getInstance&#40;&#41;</code>. It's also easy to make a singleton bus with Otto—you can even use <a href='https://github.com/square/dagger/'>Dagger</a> to inject the global bus where needed (to truly Square-ify your code).</p><p>Every activity registers with the bus when it is shown and unregisters when it is hidden. This ensures that only one activity receives events from the bus at a time. We also add a subscriber method to handle the notification. We accomplish this with a base class:</p><pre><code>public abstract class BaseActivity extends Activity {
    @Override
    public void onResume&#40;&#41; {
        super.onResume&#40;&#41;;
        EventBus.getInstance&#40;&#41;.register&#40;this&#41;;
    }
    
    @Override
    public void onPause&#40;&#41; {
        super.onPause&#40;&#41;;
        EventBus.getInstance&#40;&#41;.unregister&#40;this&#41;;
    }

    public void onEvent&#40;NotificationEvent notification&#41; {
        startActivity&#40;new Intent&#40;BaseActivity.this, NotificationActivity.class&#41;&#41;;
        overridePendingTransition&#40;R.anim.fade&#95;in&#95;animation, R.anim.fade&#95;out&#95;animation&#41;;
    }

}
</code></pre><p>Then, in our GCM Receiver, we post to the event bus:</p><pre><code>public class GcmReceiver extends BroadcastReceiver {
    @Override
    public void onReceive&#40;Context context, Intent intent&#41; {
        GoogleCloudMessaging gcm = GoogleCloudMessaging.getInstance&#40;context&#41;;
        String gcmMessageType = gcm.getMessageType&#40;intent&#41;;
        if &#40;GoogleCloudMessaging.MESSAGE&#95;TYPE&#95;MESSAGE.equals&#40;gcmMessageType&#41;&#41; {
            Bundle payload = intent.getExtras&#40;&#41;;
            NotificationEvent notification = new NotificationEvent&#40;payload&#41;;

            // Register ourselves so we can receive the NoSubscriberEvent notification if no
            // activities are registered
            EventBus.getDefault&#40;&#41;.register&#40;this, NoSubscriberEvent.class&#41;;

            // Post the notification for an activity
            EventBus.getDefault&#40;&#41;.post&#40;notification&#41;;
        }
        setResultCode&#40;Activity.RESULT&#95;OK&#41;;
    }
</code></pre><p>The real magic happens in this line:</p><pre><code>    // Register ourselves so we can receive the NoSubscriberEvent notification if no
    // activities are registered
    EventBus.getDefault&#40;&#41;.register&#40;this, NoSubscriberEvent.class&#41;;
</code></pre><p>We register the <code>GcmReceiver</code> with the event bus to receive only the <code>NoSubscriberEvent</code>. If no activity is being displayed, then nothing is registered for <code>NotificationEvent</code>. EventBus will then post the <code>NoSubscriberEvent</code>, which we can handle in <code>GcmReceiver</code> like so:</p><pre><code>/&#42;
 &#42; Called when there are no subscribers to the NotificationEvent.
 &#42;
 &#42; This occurs when the app is in the background and no activities are riding the bus.
 &#42;/
public void onEvent&#40;NoSubscriberEvent deadEvent&#41; {
    // We're all done here
    EventBus.getDefault&#40;&#41;.unregister&#40;this&#41;;

    NotificationEvent notification = &#40;NotificationEvent&#41; deadEvent.originalEvent;

    // Save the wee little notification for later consumption by an activity
    Mailbox.getInstance&#40;&#41;.put&#40;notification&#41;;

    // Display the notification in the notification drawer
    buildNotification&#40;notification&#41;;
}
</code></pre><p><code>buildNotification</code> puts the notification in the notification drawer with a <a href='https://developer.android.com/reference/android/app/PendingIntent.html'>PendingIntent</a>. We also save the notification in a global queue, so that when application is opened back up <em>not</em> from the notification drawer, we can process it as normal. There's probably a better solution than this, since it's possible for the <code>Mailbox</code> singleton to be deallocated when the app is in the background.</p><p>Both EventBus and Otto also support "sticky" events. Once you post an event with <code>postSticky</code>, EventBus caches it, so you can get the last event back with <code>bus.getStickyEvent&#40;TheEventClass.class&#41;</code>. Otto allows you to use a default value by defining a method with a <code>@Provides</code> annotation. In this example, sticky events could replace storing the notification away in <code>Mailbox</code>.</p><h3 id="differentiating&#95;notifications">Differentiating notifications</h3><p>Your app probably sends more than one kind of GCM message. If that's the case, you can subclass <code>NotificationEvent</code> to handle different message types. When you register an activity with the event bus, you can write your subscriber functions so they only respond to certain kinds of notifications. This is a nice way to use the built-in type system, instead of doing something like <code>payload.getString&#40;&quot;type&quot;&#41;.equals&#40;aMessageType&#41;</code> everywhere.</p><h2 id="conclusion">Conclusion</h2><p>Event buses are awesome. There are many more use cases, such as communicating between fragments in a sane way (without using interfaces) or making callbacks from <code>AsyncTasks</code> (although, I prefer replacing <code>AsyncTask</code> <a href='http://markhudnall.com/2013/10/15/rxjava-and-android/'>with RxJava</a> altogether<a href='#fn-2' id='fnref2'><sup>2</sup></a>).</p><ol class='footnotes'><li id='fn-1'>Though there is a <a href='http://howrobotswork.wordpress.com/2013/07/20/subclassing-with-otto/'>workaround</a> for Otto.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Event buses could actually replace RxJava for a lot of simpler use cases. Otto and EventBus both provide some control over threading so you can do things in the background, and it might make for less complex looking code.<a href='#fnref2'>&#8617;</a></li></ol>]]></description></item><item><title>Happiness and Fulfillment</title><link>https://markhudnall.com/2013/11/05/happiness-and-fulfillment/</link><pubDate>Mon, 04 Nov 2013 16:00:00 -0800</pubDate><description><![CDATA[<p>Two patients lie in their death beds in a hospital. Maybe they're both surrounded by their family and friends. Maybe they're in the Northwest as the weather gets colder and they both realize independently, at slightly different times, that they'll never see the sun again. Maybe they each have regrets.</p><p>One thing I can say for certain, as the author of this little story, is that one patient's life was spent in the pursuit of happiness, while the other's was spent in the pursuit of fulfillment. Whether they each found it is unbeknownst to me. I also can only speculate what they thought as they quietly slipped away, as the steady beep of the EKG disappeared into a deafening solid note, which the nurses quickly cut out partly because we got the message and partly because the sound itself is so obnoxious.</p><p>In that instant, I suppose it doesn't matter whether the one found happiness or the other found fulfillment, or even which they chose to pursue—whether they spent their lives frolicking in the grass or anti-frolicking in a metaphorical windowless office. I suppose it doesn't matter to the two patients, at that very moment and every one thereafter, whether or not they figured it all out.</p><p>But for the rest of us, it does.</p><p>Every day, I wake up and struggle with whether I want to be myself and happy or whether I want to be better and fulfilled.</p><h2 id="happiness">Happiness</h2><p>I've spent most of my life in the pursuit of happiness<a href='#fn-1' id='fnref1'><sup>1</sup></a>, but the times I've actually felt happy are when I stopped trying. Happiness is an ephemeral moment when I'm not self-conscious, when I'm not worried about what I'm doing with my body or what I look like, when I'm completely present. It's taken me a long time to understand what that feels like and I think it's why people like dancing, and why I like music festivals<a href='#fn-2' id='fnref2'><sup>2</sup></a>.</p><p>When I'm present, I forget the past, I forget the future, I forget my aspirations. I forget who I <em>am</em> in my mind's eye, because I'm focused on <em>being</em> who I am<a href='#fn-3' id='fnref3'><sup>3</sup></a>.</p><p>I get lost in the present. In a kind of twisted way, that presence also implies an absence. I'm <em>here</em> but I'm also not really <em>there</em>, because there's no context for me being there.</p><p>In that blissful moment<a href='#fn-4' id='fnref4'><sup>4</sup></a>, however, I don't notice an absence. I simply accept the beauty that everything is the way it is.</p><h3 id="it&#95;isn't&#95;enough">It isn't enough</h3><p>And then, something creeps into my psyche. I start to feel complacent. Stagnated.</p><p>How do I reconcile this complacency with my desire to be better, to do better, to not simply accept my experience and my fate as it is?</p><h2 id="fulfillment">Fulfillment</h2><p>Some would say you can't. When you feel that complacency, it's because life is about fulfillment, not happiness, and you aren't fulfilling yourself. And that's true—I feel guilty<a href='#fn-5' id='fnref5'><sup>5</sup></a> for not trying to better myself, because I know I can be more. I know I can be part of something greater. When I strive to better myself, when I build something, when I'm uncomfortable, I'm <em>satisfied</em>. I'm <em>contributing</em>. I've felt this way a lot while working on <a href='https://getclef.com'>Clef</a>.</p><h3 id="it&#95;isn't&#95;enough&#95;either">It isn't enough either</h3><p>You can say that you're happy when you're bettering yourself, but that's an issue of semantics, and I'd call that fulfillment.</p><p>When I strive to better myself, it's out of discontent with who I am <em>now</em>. That's pretty opposed to my happiness. Sometimes that discontent is totally concrete and I know exactly what I need to do, but most of the time, it's an itch more than anything else. A reminder in the back of my head that what I'm doing isn't enough.</p><h2 id="i&#95;don't&#95;have&#95;a&#95;satisfying&#95;answer">I don't have a satisfying answer</h2><p>If you're looking for someone to tell you that happiness isn't important, it isn't me. But I cannot tell you that fulfillment is the answer either, sorry.</p><p>The pursuit of fulfillment is torture. Perhaps if I were driven by some purely-good, higher purpose, it wouldn't be. But I'm driven by a feeling of incompleteness and my insecurities.</p><h2 id="trust&#95;yourself">Trust yourself</h2><p>You can't have only happiness or only fulfillment. You need to have a balance.</p><p>"Balance" is a pretty wholly disappointing answer, but I'm not surprised it isn't some grand revelation (seeing how people have been thinking about this sort of thing for a very long time).</p><p>It raises the next question: How do I know what the right balance is?</p><p>That isn't something I can answer for you. Hell, it's something I can barely answer for myself. But I try to approach it from a place of self-love, where I can begin to accept who I am, even when I'm not happy with who I am.</p><p>When I feel right with the world, that is how I am. When I feel discontent and I strive to better myself, that is also how I am. I can't fight against the way I feel in a given moment, because in that moment, I'm being <em>me</em>.</p><p>So when I want to float in the waves, I revel in that fact. And when I'm no longer content just floating, when I want to swim my ass off and ride one into the shore, I revel in that fact too.</p><p>Trusting myself to do both is hard. I worry that when I'm floating or when I'm swimming, I'll never have the desire for the other again. It isn't that I want to be one way or another—it's the self-doubt in either state that drives me crazy. So I have to trust that what I'm doing at any given moment is right for me, and listen to myself when it isn't.</p><p>When I am one of those patients, wondering whether I'll ever see the sun again, I probably still won't know whether I've "achieved" fulfillment or happiness. And it probably won't matter<a href='#fn-6' id='fnref6'><sup>6</sup></a>.</p><p>What will be true is when I wanted to be better, I tried, and when I wanted to be me, I was.</p><p>And hopefully, the nurse will turn that obnoxious sound off sooner rather than later.</p><ol class='footnotes'><li id='fn-1'>Well, I spent high school in the wholehearted pursuit of <em>being cool</em>, which I guess I did because I thought it would make me happy.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>The first music festival I ever attended was Sasquatch 2013. I'll have to write another post about how to approach festivals, but in a nutshell: festivals can be an incredibly safe space for exploring presence and being yourself. Some call it <em>letting loose</em>.<a href='#fnref2'>&#8617;</a></li><li id='fn-3'>Maybe a better way to say this is that there is no <em>I</em> to be focused on <em>anything</em>.<a href='#fnref3'>&#8617;</a></li><li id='fn-4'>That "moment" could last weeks or months.<a href='#fnref4'>&#8617;</a></li><li id='fn-5'>I wonder how much of that is a result of my own drive and how much is a result of constantly comparing myself to others.<a href='#fnref5'>&#8617;</a></li><li id='fn-6'>Or maybe it will! The living will never know.<a href='#fnref6'>&#8617;</a></li></ol>]]></description></item><item><title>RxJava and Android: Just What the Doctor Ordered</title><link>https://markhudnall.com/2013/10/15/rxjava-and-android/</link><pubDate>Mon, 14 Oct 2013 17:00:00 -0700</pubDate><description><![CDATA[<p>I work on Android at <a href='https://getclef.com'>Clef</a>. Most of the time, though, it feels like I'm working against Android. The Activity and Service model is elegantly designed for interoperability, but when it comes down to implementation, it's often painful to work with.<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><p>But a bigger problem is handling user interaction. There are two very common patterns that I have trouble with:</p><ol><li>Doing something in the background and updating the UI.</li><li>Responding to user interaction and updating a different part of the UI.</li></ol><h2 id="rxjava">RxJava</h2><p>In both cases, <a href='https://github.com/Netflix/RxJava'>RxJava</a> helps me keep my sanity. RxJava is a Java implementation of <a href='https://en.wikipedia.org/wiki/Functional_reactive_programming'>Functional Reactive Programming</a>. If you aren't familiar with FRP, it's not as complicated as its name makes it sound. FRP is all about streams of data. A <em>stream</em> produces data at different points in time. An <em>observer</em> is notified whenever data in that stream and does something with it. It's a little different than the <a href='https://en.wikipedia.org/wiki/Observer_pattern'>Observer pattern</a>, since there's a focus on composition. You can map, filter, and reduce streams—that's where the "functional" part comes in.</p><h2 id="doing&#95;things&#95;in&#95;the&#95;background">Doing things in the background</h2><h3 id="the&#95;old&#95;way:&#95;asynctask">The old way: AsyncTask</h3><p>It's an inconvenient necessity that we have to worry about blocking the UI thread. Android provides <a href='https://developer.android.com/reference/android/os/AsyncTask.html'>AsyncTask</a> to help ease this pain, letting you do work on the background with <code>doInBackground</code> and then delivering on the UI thread with <code>onPostExecute</code>. For the most part, the AsyncTasks I create are requests to Clef's API server that return JSON. But there are a few pitfalls with AsyncTask:</p><ul><li>Error handling: as <a href='https://mttkay.github.io/blog/2013/08/25/functional-reactive-programming-on-android-with-rxjava/'>mttkay points out</a>, there's no easy way to handle error messages in the UI for errors that happen in the background. I usually return null instead of the actual JSONObject and then later handle the case where the JSONObject is null. Ugh.</li><li>Code reuse/readability: Since API requests are all similar, I use a general APIRequestTask that I give a path and some parameters. I also pass in the caller which implements a <code>APIRequestHandler</code> interface, so the caller can handle the results.    </li></ul><p>In the activity/fragment:     </p><pre><code>APIRequestTask request = new APIRequestTask&#40;&quot;/user/register&quot;, this&#41;;
request.putParameter&#40;&quot;email&quot;, &quot;test@example.com&quot;&#41;;
request.execute&#40;&#41;;
</code></pre>In <code>APIRequestTask.java</code>:  <br /><pre><code>public interface NetworkRequestHandler {
    public void onRequestCompleted&#40;JSONObject response, String url&#41;;
}

public NetworkRequestTask&#40;String url, NetworkRequestHandler handler&#41; {
    this.url = url;
    this.mHandler = handler;
    this.requestParameters = new ArrayList&lt;NameValuePair&gt;&#40;&#41;;
}

public void putParameter&#40;String key, String value&#41; {
    if &#40;key != null &amp;&amp; value != null&#41; {
        requestParameters.add&#40;new BasicNameValuePair&#40;key, value&#41;&#41;;
    }
}

@Override
protected JSONObject doInBackground&#40;Void... voids&#41; {
    // Do the request
}

@Override
protected void onPostExecute&#40;JSONObject response&#41; {
    if &#40;mHandler != null&#41; {
        mHandler.onRequestCompleted&#40;response, this.url&#41;;
    }
}
</code></pre>Though the generality is nice, with this pattern, if a calling Activity/Fragment makes multiple requests, it needs to handle responses in a single function by switching on the URL. This makes for code that isn't very readable, especially when you have to jump from where the request is executed to where the response is handled.<h3 id="once&#95;more,&#95;with&#95;feeling">Once more, with feeling</h3><p>Let's try that again with RxJava:</p><pre><code>Observable.create&#40;new Observable.OnSubscribeFunc&lt;JSONObject&gt;&#40;&#41; {
    @Override
    public Subscription onSubscribe&#40;Observer&lt;? super JSONObject&gt; observer&#41; {
        try {
            // Do the request
            // ...
            observer.onNext&#40;jsonResponse&#41;;
            observer.onCompleted&#40;&#41;;
        }
        catch &#40;Exception e&#41; {
            observer.onError&#40;e&#41;;
        }

        return Subscriptions.empty&#40;&#41;
    }
}&#41;.subscribeOn&#40;Schedulers.newThread&#40;&#41;&#41;.observeOn&#40;AndroidSchedulers.mainThread&#40;&#41;&#41;
  .subscribe&#40;new Action1&lt;JSONObject&gt;&#40;&#41; {
    @Override
    public void call&#40;JSONObject response&#41; {
        if &#40;response.getBoolean&#40;&quot;success&quot;&#41;&#41; {
            RegistrationActivity.this.messageView.setText&#40;&quot;You're all set.&quot;&#41;;
        }
    }
}, new Action1&lt;Throwable&gt;&#40;&#41; {
    @Override
    public void call&#40;Throwable error&#41; {
        Toast.makeText&#40;RegistrationActivity.this,
            error.getMessage&#40;&#41;,
            Toast.LENGTH&#95;SHORT&#41;
        .show&#40;&#41;;
    }
}&#41;;
</code></pre><p><code>Observable.create</code> creates a stream that makes a network request. When the request completes, the response is delivered from the stream to an observer. In this case, the observer is the first <code>Action1</code> in the <code>subscribe</code> method. If there are any errors, they are delivered to the second <code>Action1</code> passed into the <code>subscribe</code> method.</p><p><code>subscribeOn&#40;Schedulers.newThread&#40;&#41;&#41;</code> runs the <code>OnSubscribeFunc</code> on a thread, while <code>observeOn&#40;AndroidSchedulers.mainThread&#40;&#41;&#41;</code> delivers the results to the main thread.</p><p>It's still a little verbose, but it's more similar to writing synchronous code. I use the response in code that directly follows the request. I also get error handling on the UI thread for free.</p><h3 id="composition">Composition</h3><p>RxJava also lets you compose logically separated tasks. <a href='https://mttkay.github.io/blog/2013/08/25/functional-reactive-programming-on-android-with-rxjava/'>mttkay gives</a> this example:</p><pre><code>Observable&lt;String&gt; filePathObservable = downloadFileObservable&#40;&#41;.map&#40;new Func1&lt;File, String&gt;&#40;&#41; {
    @Override
    public String call&#40;File file&#41; {
        return file.getAbsolutePath&#40;&#41;;
    }
}&#41;;

// now emits file paths, not `File`s
subscription = filePathObservable.subscribe&#40;/&#42; Observer&lt;String&gt; &#42;/&#41;;
</code></pre><p>Unfortunately, if <code>return file.getAbsolutePath&#40;&#41;;</code> throws an error, we run into the same problem that we had with AsyncTasks: how do we handle the error when we don't have a reference to an observer? Instead of <code>map</code>, we must use <code>flatMap</code>. Here's an example where we tokenize a credit card into a <a href='http://balancedpayments.com'>Balanced</a> uri and then use the uri in a request to our server:</p><pre><code>final Card card = new Card&#40;cardNumber, expiryMonth, expiryYear, cvc&#41;;

Observable.create&#40;new Observable.OnSubscribeFunc&lt;String&gt;&#40;&#41; {
    @Override
    public Subscription onSubscribe&#40;Observer&lt;? super String&gt; observer&#41; {
        try {
            Balanced balanced = new Balanced&#40;Constants.BALANCED&#95;MARKETPLACE&#95;URI, NewCreditCardActivity.this&#41;;
            String cardURI = balanced.tokenizeCard&#40;card&#41;;
            observer.onNext&#40;cardURI&#41;;
            observer.onCompleted&#40;&#41;;
        } catch &#40;Exception e&#41; {
            observer.onError&#40;e&#41;;
        }

        return Subscriptions.empty&#40;&#41;;
    }
}&#41;
.flatMap&#40;new Func1&lt;String, Observable&lt;JSONObject&gt;&gt;&#40;&#41; {
    @Override
    public Observable&lt;JSONObject&gt; call&#40;String cardURI&#41; {
        return Observable.create&#40;new Observable.OnSubscribeFunc&lt;JSONObject&gt;&#40;&#41; {
            @Override
            public Subscription onSubscribe&#40;Observer&lt;? super JSONObject&gt; observer&#41; {
                try {
                    JSONObject response = doTheRequest&#40;cardURI&#41;; 
                    observer.onNext&#40;response&#41;;
                    observer.onCompleted&#40;&#41;;
                }
                catch &#40;Exception e&#41; {
                    observer.onError&#40;e&#41;;
                }
                return Subscriptions.empty&#40;&#41;;
            }
        }&#41;;
    }
}&#41;
.subscribe&#40;/&#42; ... &#42;/&#41;;
</code></pre><p>Unfortunately, maintaining the error handling abilities makes the code much more verbose. However, it also makes it <em>a lot</em> easier to display errors to the UI and chain separate, dependent asynchronous operations in a readable way.</p><p><strong>Edit:</strong> lungos in the comments pointed out that the using <code>flatMap</code> may be overkill. Any exceptions in the <code>flatMap</code>'s <code>OnSubscribeFunc</code> will be caught by the try/catch block in the original <code>Observable</code>'s <code>OnSubscribeFunc</code>. In fact, <code>flatMap</code> is not necessary here at all, because <code>map</code> in RxJava will wrap return values in an <code>Observable</code> automatically, making <code>map</code> and <code>flatMap</code> essentially the same. They aren't <em>actually</em> the same, but the nuance requires an explanation of monads and other theory that I don't want to get into.</p><h2 id="responding&#95;to&#95;user&#95;interaction">Responding to user interaction</h2><p>RxJava isn't just for background operations. While RxJava isn't yet as fully featured as its Objective-C counterpart, <a href='https://github.com/ReactiveCocoa/ReactiveCocoa'>ReactiveCocoa</a>, it's still really useful for making a responsive UI. It also enforces a separation of view and model logic.</p><p>For instance, say I'm displaying information about a pending payment. Instead of storing payment information as member variables of an activity, I store them in a separate <code>Payment</code> model object (which is good practice anyway). A user can select a shipping option that increases a total amount of the payment. I could create an <code>onItemClickListener</code> which updates the amount <code>TextView</code>, but this entangles the view logic with the underlying model logic.</p><p>With RxJava, I can use a <a href='http://netflix.github.io/RxJava/javadoc/rx/subjects/ReplaySubject.html'>Subject</a> to automatically update the UI. Subjects are observables that you can both subscribe to and trigger updates on. With Subjects, you don't need a reference to an observer—you just emit the data on the subject itself.</p><pre><code>public class Payment {
    private Integer totalAmount; 
    private ReplaySubject&lt;Integer&gt; totalAmountSubject = new ReplaySubject.create&#40;&#41;;

    /&#42; ... &#42;/

    public void setTotalAmount&#40;Integer newAmount&#41; {
        this.totalAmount = newAmount; 
        this.totalAmountSubject.onNext&#40;this.totalAmount&#41;;
    }

    public Observable&lt;Integer&gt; totalAmountObservable&#40;&#41; {
        return this.totalAmountSubject.observeOn&#40;AndroidSchedulers.mainThread&#40;&#41;&#41;;
    }

    /&#42; ... &#42;/
}
</code></pre><p>Now, I can subscribe to <code>totalAmountObservable</code> in the Activity like so:</p><pre><code>this.totalAmountSubscription = this.payment.totalAmountInCentsObservable&#40;&#41;.subscribe&#40;new Action1&lt;Integer&gt;&#40;&#41; {
    @Override
    public void call&#40;Integer newAmount&#41; {
        Log.d&#40;TAG, &quot;Total amount in cents has been updated!&quot;&#41;;
        TextView amountView = &#40;TextView&#41; findViewById&#40;R.id.price&#41;;
        amountView.setText&#40;Format.formatCents&#40;newAmount&#41;&#41;;
    }
}&#41;;
</code></pre><p>In the <code>onItemClickListener</code> (and anywhere else), I can now just use <code>setTotalAmount</code>, and the view is automatically updated to reflect the new amount.</p><p>If you've used <a href='http://backbonejs.org/'>Backbone.js</a> or another JavaScript framework, this one-way binding might not be new to you, but it's nice to have it available on Android. There's also an <a href='http://github.com/Netflix/RxJava/issues/335'>open issue on GitHub</a> for adding more UI hooks and make it even more usable.</p><p><strong>Edit:</strong> <a href='http://twitter.com/bryanstern'>@bryanstern</a> pointed out that you can use a <code>BehaviorSubject</code> instead of a <code>ReplaySubject</code> to the same effect. The difference between them is that <code>BehaviorSubject</code> emits only the last item when it is subscribed to, while <code>ReplaySubject</code> emits all previous items. That means if you do <code>subject.onNext&#40;foo1&#41;; subject.onNext&#40;foo2&#41;;</code> you'll get <code>foo1</code> and then <code>foo2</code> with a <code>ReplaySubject</code>, but just <code>foo2</code> with a <code>BehaviorSubject</code>. Check out the different kinds of subjects in the <a href='http://github.com/Netflix/RxJava/wiki/Subject'>docs</a>.</p><h2 id="final&#95;thoughts">Final thoughts</h2><p>RxJava has been a pleasure to use so far. There are a few snags, like remembering to include <code>subscribeOn&#40;Schedulers.newThread&#40;&#41;&#41;</code> and <code>observeOn&#40;AndroidSchedulers.mainThread&#40;&#41;&#41;</code>, but being able to properly handle errors and write more readable code is essential.</p><p>What are your experiences using RxJava with Android? Am I doing anything egregiously wrong? Let me know in the comments.</p><p>You should follow me on <a href='http://twitter.com/landakram'>Twitter</a>.</p><ol class='footnotes'><li id='fn-1'>For instance, detecting when an app is being backgrounded is simple on iOS because a delegate function is provided for you. On Android, however, we are forced to manually keep track of whether activities are open (or other similar hackery). Again, the Activity model is beautiful, but sometimes, we need to keep global state, dammit.<a href='#fnref1'>&#8617;</a></li></ol>]]></description></item><item><title>Docking at Port</title><link>https://markhudnall.com/2013/09/24/docking-at-port/</link><pubDate>Mon, 23 Sep 2013 17:00:03 -0700</pubDate><description><![CDATA[<p><strong>This post is part of a larger media experiment describing why, and how, <a href='https://getclef.com'>Clef</a> moved to Oakland. If you want to read more, visit the timeline at <a href='http://oakland.is/home'>oakland.is/home</a> or tell us your thoughts with <a href='https://twitter.com/search?q=%23oaklandis'>#oaklandis on Twitter</a>.</strong></p><p><em>We woke up the next morning sore and tired from sleeping on the floor. We drove in to our new office and didn't know what to expect. What we found was a burgeoning community that welcomed us openly.</em></p><p>The <a href='http://www.portworkspaces.com/spaces/101-broadway/'>Port at 101 Broadway</a> sits on the edge of Jack London Square. A 30-second walk takes you to the water, where small boats wait at the docks and a hulking freighter unloads container after container with a tall crane off in the distance.</p><p><img src="/img/oakland1-1024x768.jpg" alt="" /></p><p>While the breeze out there is refreshing, all the good stuff is happening within the red brick walls of the Port.<a href='#fn-1' id='fnref1'><sup>1</sup></a> We've been here three weeks, and it felt like home two weeks ago.</p><p>The first (real) day we arrived, we were exhausted from the move. Aaron and Ryan from <a href='http://www.theshoppad.com/'>ShopPad</a> immediately invited us to play ping pong. Though we didn't actually play (we had to run into a meeting), I was caught off guard in the best way. At our old office, we were friendly with the other companies nearby, but never really interacted with them socially.<a href='#fn-2' id='fnref2'><sup>2</sup></a></p><p>And Michael, Zoey and Stephen helped with everything else.</p><p>Michael is one of the founders of the Port and an architect who helped design Pier 39. When we jokingly asked him for a bike room, he told us he was already making one.<a href='#fn-3' id='fnref3'><sup>3</sup></a></p><p>Stephen runs IT and general operations. When our router stopped working, Stephen got mobile hotspots for the whole co-working space.</p><p>And Zoey does community management. She designed a drip coffee bar that cuts down on plastic waste for everyone to use. We even had the crew over at <a href='http://www.mrespresso.com/'>Mr. Espresso</a> give us a lesson on how to make perfect drip coffee.<a href='#fn-4' id='fnref4'><sup>4</sup></a></p><p><img src="/img/port2-1024x768.jpg" alt="" /></p><p>The staff (Michael, Zoey, Stephen and many others) and the co-workers at Port are passionate about what they do. And what they do isn’t the same buzzword-heavy software play that overcrowds co-working spaces across the Bay. They’re in music, law, art, home decor, cannabis, architecture, video production and even Antarctica.<a href='#fn-5' id='fnref5'><sup>5</sup></a> There is software too, of course, but it’s more focused. When we get together for weekly dinners or for a game of pool, we don’t just rehash the tech news of the day. We talk about a co-worker’s homemade wine, the best places to catch the sun setting over the Bay, experiences at Burning Man or what’s showing at next month’s Art Murmur.</p><p>Port isn’t more cultured or anything like that–it’s just more diverse. It isn’t contaminated by technical elitism or overt, cold competition. It’s filled with interested, disparate people who are making something real.</p><p><img src="/img/IMG_0545-1024x768.jpg" alt="" /></p><p>And they’re friendly as hell, too.</p><p><em>The last piece in this series is <a href='http://brennenbyrne.com/2013/09/oakland/'>Oakland</a>.</em></p><ol class='footnotes'><li id='fn-1'>Well, that’s kind of an exaggeration. There are some great restaurants and <a href='http://www.jacklondonsquare.com/events.php#ongoing_events/'>events</a> happening in Jack London. Check out Jack's Night Market for an awesome mix of food and art.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Of course, that's our fault too. It's easy to get into the rhythm of just working at work and neglecting the other aspects of the people around you – and that goes for a company of any size. The difference at Port was that people made it <em>easy</em> to engage them.<a href='#fnref2'>&#8617;</a></li><li id='fn-3'>And it got built in the next 2 days.<a href='#fnref3'>&#8617;</a></li><li id='fn-4'>A drip coffee setup seems pretentious, but it’s a beautiful alternative to the water cooler. We’ve had drip coffee for about a week, and the number of interactions I’ve had with fellow co-workers has risen dramatically. It’s also about 10 bucks to make.<a href='#fnref4'>&#8617;</a></li><li id='fn-5'>One startup at Port is building a way for researchers in Antarctica to share their experiences with each other and the outside world. They previously worked at <a href='http://en.wikipedia.org/wiki/Palmer_Station'>Palmer Station</a>.<a href='#fnref5'>&#8617;</a></li></ol>]]></description></item><item><title>The 10-Hour Move</title><link>https://markhudnall.com/2013/09/24/the-10-hour-move/</link><pubDate>Mon, 23 Sep 2013 17:00:02 -0700</pubDate><description><![CDATA[<p><strong>This post is part of a larger media experiment describing why, and how, <a href='https://getclef.com'>Clef</a> moved to Oakland. If you want to read more, visit the timeline at <a href='http://oakland.is/home'>oakland.is/home</a> or tell us your thoughts with <a href='https://twitter.com/search?q=%23oaklandis'>#oaklandis on Twitter</a>.</strong></p><p><em>Brennen promised it would be like ripping off a bandaid. In the end, he was right. But at the time, it felt like ripping off the bandaid, putting it back on, and then ripping it off a few more times for good measure.</em></p><p>We moved to Oakland in less than 10 hours.</p><p>That morning, we were working at our windowless, basement office in San Francisco. By the evening, we were sleeping on the floor of our new home in Oakland, ready to wake up the next day and drive to our new office at Jack London Square.</p><hr/><h2 id="3pm">3pm</h2><p>The Bay Bridge closes tomorrow. We have to drive over the bridge to meet the owner of a house anyway, so Brennen emails Port Workspaces and asks if we can sign a year-long lease–and move in all our stuff–today. They respond almost immediately and give us the go ahead.</p><p>We start disassembling the office.</p><h2 id="5pm">5pm</h2><p>Traffic is heavy on the bridge. We finally arrive at the house, just northwest of Lake Merritt. As we walked in, we spot the owner and the realtor in the backyard, watering some plants and laughing. We'd actually scheduled another house to visit at 5:30pm, but in 20 minutes of meeting the owner and seeing the place again, we are talking about signing the lease. It's the place we want to call home.</p><h2 id="5:30pm">5:30pm</h2><p>Since it's such short notice, Port isn't quite ready with keys for us. But we don't mind. We'd just driven south along Lake Merritt and realized we would be biking that route every day to work. Though the necklace of lights isn't yet lit, our faces are glowing.</p><h2 id="6-7pm">6-7pm</h2><p>One thing we notice immediately about Port is the sheer amount of glass (we actually have windows!). We get the idea to make our own whiteboards with panes of glass, hung on the wall with industrial velcro.<a href='#fn-1' id='fnref1'><sup>1</sup></a></p><p>We take a trip to Home Depot to get panes of glass and some other materials, including velcro and a drill. Glass is much, much heavier and sharper than I would have expected, but I've also never handled glass before. As we drive away from Home Depot, I keep peering into the backseat, wondering whether the glass will shatter. When we get back to Port, we assemble the whiteboards and leave them on the floor to let the velcro adhesive dry.<a href='#fn-2' id='fnref2'><sup>2</sup></a></p><p><img src="/img/whiteboards-1024x768.jpg" alt="" /></p><h2 id="8:35pm&#95;(back&#95;to&#95;san&#95;francisco)">8:35pm (Back to San Francisco)</h2><p>We still need to get the rest of our stuff from the old office, so we head back over the bridge. This is the part that feels like slapping back on the bandaid. When we come back to our old office to get the tables, it no longer feels <em>ours</em>. The shadows cast from street lights up above warp the walls. The office is done with us. We shove all the little items into boxes and load the car with tables.</p><p><img src="/img/old_office-1024x768.jpg" alt="" /></p><h2 id="9:30pm">9:30pm</h2><p>It is time for a celebratory meal at Chipotle.<a href='#fn-3' id='fnref3'><sup>3</sup></a> As we eat our last burritos as founders in San Francisco, we overhear a group of guys at another table talking about a senior executive at a large company. "I heard she slept with X (another executive) when she was working there." There's that bandaid again.</p><h2 id="11:30pm">11:30pm</h2><p>We head back over the bridge, all very happy that we won't have to make another trip tonight. As we shuttle between the car and our office on the third floor, we hear the last train roll by and the bustle of people returning home from a late dinner.</p><p><img src="/img/new_office-1024x768.jpg" alt="" /></p><p>Our old office is empty and a memory to us. It's weird to leave a place completely, to be in a routine in one moment and then gone the next, without the natural distancing of sleep.</p><p><img src="/img/moved_in-1024x768.jpg" alt="" /></p><p>But here we are, nearing midnight, standing in our new office with our whiteboards drying and our standing desks ready.</p><hr/><p>We still didn't have mattresses for our home (or even a fridge for that matter). But moving was like ripping off a bandaid, and underneath, I found the wound was fully healed. We had arrived.</p><p><em>The next piece in this series is <a href='http://jessepolak.me/one-weird-trick-to-furnish-your-new-home-for-free/'>One weird trick to furnish your new home for free</a>. (Don't worry, it isn't spam.)</em></p><ol class='footnotes'><li id='fn-1'>We later found out that Port would have painted our walls with dry-erase paint if we had asked.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>We'll cover how we did this in another post.<a href='#fnref2'>&#8617;</a></li><li id='fn-3'>It wasn't all that celebratory. I was really hungry and really, really irritable at the time.<a href='#fnref3'>&#8617;</a></li></ol>]]></description></item><item><title>Moving Alone</title><link>https://markhudnall.com/2013/09/24/moving-alone/</link><pubDate>Mon, 23 Sep 2013 17:00:01 -0700</pubDate><description><![CDATA[<p><strong>This post is part of a larger media experiment describing why, and how, <a href='https://getclef.com'>Clef</a> moved to Oakland. If you want to read more, visit the timeline at <a href='http://oakland.is/home'>oakland.is/home</a> or tell us your thoughts with <a href='https://twitter.com/search?q=%23oaklandis'>#oaklandis on Twitter</a>.</strong></p><p><em>I think box manufacturers purposefully make boxes just a little too awkwardly shaped and large. So when you try to move them by yourself, it’s nearly impossible, but when you have another person, it’s way too easy.</em></p><p>We'd missed it.</p><p>The lease was up and we hadn't found another place, so we had to move into my parents’ house in Los Altos.</p><p>Actually, <em>I</em> had to move into my parent’s house in Los Altos. Jesse was backpacking for the weekend with his father and brother in the Sierras, something he’d planned months ago, and Brennen was speaking at WordCamp in Providence. I wasn’t angry they were gone and I didn’t feel like they deserted me. I just had to move everything by myself, and that sucks. A certain surreal feeling arises when profound emotion is mixed with administrative tasks. I’ve felt it when family dies and everyone is crying and sad, but the mortician still needs papers signed for the cremation and arrangements need to be made for the funeral, and we have to decide what type of flowers to have and what box to pick to hold the ashes.<a href='#fn-1' id='fnref1'><sup>1</sup></a> I’m still not sure whether the mundane tasks help ease emotional pain or make it worse.</p><p>I can’t in good faith compare moving to a family death–that would be ridiculous. But I was still terrified. I had no sense of permanence. How long would we be staying with my dad? Two weeks? A month? A year? How long would it be until the commute made me lose it?<a href='#fn-2' id='fnref2'><sup>2</sup></a></p><p>Working at a startup means experiencing uncertainty every day. That takes a toll, but we bear it willingly because we love what we’re doing. But I don’t want everything in my life to be like that. I want to come back to a home, not just a place to sleep. I need a little certainty too. I don’t want to think about where I’ll be living in two weeks when I’m trying to help build a company that will last years.</p><p>I was terrified, and I was alone. And there the boxes and suitcases were by the door, mocking me. So I did what people do when they’re scared and unsure about the monolithic future. I started the administrative tasks. I sat for a moment, grabbed two smaller bags and began loading up the car.</p><p><em>The next piece in this series is <a href='https://brennenbyrne.com/2013/09/wandering-eyes/'>Wandering Eyes</a>.</em></p><ol class='footnotes'><li id='fn-1'>It’s weird because you’re not sure whether the mortician is trying to upsell you. I wonder if the mortician feels guilty about how easy that is.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Turns out, it was about two weeks. See the 10 hour move.<a href='#fnref2'>&#8617;</a></li></ol>]]></description></item><item><title>Slim Pickings in San Francisco</title><link>https://markhudnall.com/2013/09/24/slim-pickings/</link><pubDate>Mon, 23 Sep 2013 17:00:00 -0700</pubDate><description><![CDATA[<p><strong>This post is part of a larger media experiment describing why, and how, <a href='https://getclef.com'>Clef</a> moved to Oakland. If you want to read more, visit the timeline at <a href='https://oakland.is/home'>oakland.is/home</a> or tell us your thoughts with <a href='https://twitter.com/search?q=%23oaklandis'>#oaklandis on Twitter</a>.</strong></p><p><img src="/img/sunset-1024x664.jpg" alt="" /></p><p>It gets foggy in Excelsior. Not as much as the Sunset, but the "wall of fog" up there kind of leaks down and casts a gray in the mornings and evenings.</p><p>On July 27th, though, the sun was rearing its head, and we were feeling good.</p><p>We were about to visit an apartment only a few blocks away with high hopes. Rent was only $3000 a month, the bedrooms looked sunny and big in the Craigslist post, and it was almost next door. It wouldn't be the palace we'd found for the summer, but it was close enough (and cheap enough) that we'd be happy.</p><p>I never considered $3000 a month cheap until I started looking for apartments in San Francisco. Every day we looked, we lowered our expectations a little more. It's amazing what relative pricing does to the brain - we started out with an absolute maximum of $3300, and by the end of the week, we were all looking at the $4000 apartments and wondering, "Why couldn't we?"</p><p>That day I was bluntly educated by the city of San Francisco about what $3000 a month gets you. The bedrooms were tiny and narrow, like slightly widened hallways and nothing like the pictures. The bathroom (only one) was very small, and even though I'm short,<a href='#fn-1' id='fnref1'><sup>1</sup></a> I could barely fit my head underneath the shower head. But these were just gripes, things we could live with and get accustomed to over time.</p><p>We continued doing our walkthrough-I like to circle around a few times pretending like I know all the things a responsible renter is supposed to look for-until we realized: there's no kitchen. The three of us were piled into the bathroom, quietly wondering aloud where the kitchen was, when we heard another prospective tenant ask the owner the same question.</p><p>"Sorry, there's no kitchen. But you can put a hotplate right here."<a href='#fn-2' id='fnref2'><sup>2</sup></a></p><p>Brennen turned to me, flattened his mouth and said, "Nope," and we booked it out of there.</p><p>The place was not physically unlivable.<a href='#fn-3' id='fnref3'><sup>3</sup></a> It had bedrooms, it had bathrooms, it had a place where food could be cooked. But it was $3000 a month. I didn't want to live there for a year and pay that price. What pained me is that most people <em>couldn't</em> pay that price. I've read the articles about tech people invading the city, paying 10 bucks for a slice of bread and a cup of coffee. And there I was, a tech person who comes from privilege in San Francisco looking for an apartment, increasing the cost of living for everyone. I wasn't an artist or an SF local or a student. I was the reason why, for $3000 a month, you got an apartment with a little counter where you could put a hotplate.</p><p>I didn't want to be a part of that problem.</p><p>I didn't want to make people pay exorbitantly to just get by.</p><p>But dammit, I needed a place to live.</p><p><em>The next piece in this series is <a href='/2013/09/24/moving-alone/'>Moving Alone</a>.</em></p><ol class='footnotes'><li id='fn-1'>Hey, still above average.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Something I (a naive college graduate) learned from apartment hunting: people lie on Craigslist. Well, they don't lie outright, they just don't tell you the whole truth until you actually get over there. Apartment hunting, like most human interaction, unfortunately, is all about due diligence.<a href='#fnref2'>&#8617;</a></li><li id='fn-3'>Though legally, it wasn't an in-law apartment as advertised, since an in-law apartment must have a kitchen.<a href='#fnref3'>&#8617;</a></li></ol>]]></description></item></channel></rss>